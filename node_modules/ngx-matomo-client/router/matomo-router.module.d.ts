import { ModuleWithProviders } from '@angular/core';
import { MatomoRouterConfigurationWithInterceptors } from './configuration';
import { MatomoRouter } from './matomo-router.service';
import * as i0 from "@angular/core";
export declare class MatomoRouterModule {
    private readonly router;
    constructor(router: MatomoRouter, parent?: MatomoRouterModule, parentDeprecated?: NgxMatomoRouterModule);
    static forRoot(configWithInterceptors?: MatomoRouterConfigurationWithInterceptors): ModuleWithProviders<MatomoRouterModule>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatomoRouterModule, [null, { optional: true; skipSelf: true; }, { optional: true; skipSelf: true; }]>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<MatomoRouterModule, never, never, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<MatomoRouterModule>;
}
/**
 * @deprecated use MatomoRouterModule instead
 * @breaking-change 7.0.0
 */
export declare class NgxMatomoRouterModule {
    private readonly router;
    constructor(router: MatomoRouter, parent?: MatomoRouterModule, parentDeprecated?: NgxMatomoRouterModule);
    static forRoot(configWithInterceptors?: MatomoRouterConfigurationWithInterceptors): ModuleWithProviders<NgxMatomoRouterModule>;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxMatomoRouterModule, [null, { optional: true; skipSelf: true; }, { optional: true; skipSelf: true; }]>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<NgxMatomoRouterModule, never, never, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<NgxMatomoRouterModule>;
}
