import { forwardRef, Inject, NgModule, Optional, SkipSelf, } from '@angular/core';
import { ɵMATOMO_ROUTER_ENABLED as MATOMO_ROUTER_ENABLED } from 'ngx-matomo-client/core';
import { MATOMO_ROUTER_CONFIGURATION, } from './configuration';
import { provideInterceptors } from './interceptor';
import * as i0 from "@angular/core";
import * as i1 from "./matomo-router.service";
export class MatomoRouterModule {
    constructor(router, parent, parentDeprecated) {
        this.router = router;
        if (!parent && !parentDeprecated) {
            // Do not initialize if it is already (by a parent module)
            this.router.initialize();
        }
    }
    static forRoot(configWithInterceptors = {}) {
        // Note: not using "rest" syntax here, in order to avoid any dependency on tslib (and reduce package size)
        // The only drawback of this is that MATOMO_ROUTER_CONFIGURATION will actually
        // contain a reference to provided interceptors
        return {
            ngModule: MatomoRouterModule,
            providers: [
                { provide: MATOMO_ROUTER_CONFIGURATION, useValue: configWithInterceptors },
                provideInterceptors(configWithInterceptors.interceptors),
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoRouterModule, deps: [{ token: i1.MatomoRouter }, { token: MatomoRouterModule, optional: true, skipSelf: true }, { token: forwardRef(() => NgxMatomoRouterModule), optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.2", ngImport: i0, type: MatomoRouterModule }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoRouterModule, providers: [{ provide: MATOMO_ROUTER_ENABLED, useValue: true }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoRouterModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [{ provide: MATOMO_ROUTER_ENABLED, useValue: true }],
                }]
        }], ctorParameters: () => [{ type: i1.MatomoRouter }, { type: MatomoRouterModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: NgxMatomoRouterModule, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => NgxMatomoRouterModule)]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }] });
/**
 * @deprecated use MatomoRouterModule instead
 * @breaking-change 7.0.0
 */
export class NgxMatomoRouterModule {
    constructor(router, parent, parentDeprecated) {
        this.router = router;
        if (!parent && !parentDeprecated) {
            // Do not initialize if it is already (by a parent module)
            this.router.initialize();
        }
    }
    static forRoot(configWithInterceptors = {}) {
        // Note: not using "rest" syntax here, in order to avoid any dependency on tslib (and reduce package size)
        // The only drawback of this is that MATOMO_ROUTER_CONFIGURATION will actually
        // contain a reference to provided interceptors
        return {
            ngModule: NgxMatomoRouterModule,
            providers: [
                { provide: MATOMO_ROUTER_CONFIGURATION, useValue: configWithInterceptors },
                provideInterceptors(configWithInterceptors.interceptors),
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: NgxMatomoRouterModule, deps: [{ token: i1.MatomoRouter }, { token: MatomoRouterModule, optional: true, skipSelf: true }, { token: forwardRef(() => NgxMatomoRouterModule), optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.2", ngImport: i0, type: NgxMatomoRouterModule }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: NgxMatomoRouterModule, providers: [{ provide: MATOMO_ROUTER_ENABLED, useValue: true }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: NgxMatomoRouterModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [{ provide: MATOMO_ROUTER_ENABLED, useValue: true }],
                }]
        }], ctorParameters: () => [{ type: i1.MatomoRouter }, { type: MatomoRouterModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: NgxMatomoRouterModule, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => NgxMatomoRouterModule)]
                }, {
                    type: Optional
                }, {
                    type: SkipSelf
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0b21vLXJvdXRlci5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWF0b21vLWNsaWVudC9yb3V0ZXIvbWF0b21vLXJvdXRlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFVBQVUsRUFDVixNQUFNLEVBRU4sUUFBUSxFQUNSLFFBQVEsRUFDUixRQUFRLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHNCQUFzQixJQUFJLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekYsT0FBTyxFQUNMLDJCQUEyQixHQUU1QixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBTXBELE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsWUFDbUIsTUFBb0IsRUFDYixNQUEyQixFQUluRCxnQkFBd0M7UUFMdkIsV0FBTSxHQUFOLE1BQU0sQ0FBYztRQU9yQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDaEMsMERBQTBEO1lBQzFELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FDWix5QkFBb0UsRUFBRTtRQUV0RSwwR0FBMEc7UUFDMUcsOEVBQThFO1FBQzlFLCtDQUErQztRQUMvQyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFO2dCQUMxRSxtQkFBbUIsQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUM7YUFDekQ7U0FDRixDQUFDO0lBQ0osQ0FBQzs4R0E1QlUsa0JBQWtCLDZHQUluQixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUM7K0dBSnRDLGtCQUFrQjsrR0FBbEIsa0JBQWtCLGFBRmxCLENBQUMsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDOzsyRkFFcEQsa0JBQWtCO2tCQUg5QixRQUFRO21CQUFDO29CQUNSLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztpQkFDaEU7OzBCQUlJLFFBQVE7OzBCQUFJLFFBQVE7OzBCQUNwQixNQUFNOzJCQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzs7MEJBQzlDLFFBQVE7OzBCQUNSLFFBQVE7O0FBeUJiOzs7R0FHRztBQUlILE1BQU0sT0FBTyxxQkFBcUI7SUFDaEMsWUFDbUIsTUFBb0IsRUFDYixNQUEyQixFQUluRCxnQkFBd0M7UUFMdkIsV0FBTSxHQUFOLE1BQU0sQ0FBYztRQU9yQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDaEMsMERBQTBEO1lBQzFELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FDWix5QkFBb0UsRUFBRTtRQUV0RSwwR0FBMEc7UUFDMUcsOEVBQThFO1FBQzlFLCtDQUErQztRQUMvQyxPQUFPO1lBQ0wsUUFBUSxFQUFFLHFCQUFxQjtZQUMvQixTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFO2dCQUMxRSxtQkFBbUIsQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUM7YUFDekQ7U0FDRixDQUFDO0lBQ0osQ0FBQzs4R0E1QlUscUJBQXFCLDZHQUl0QixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUM7K0dBSnRDLHFCQUFxQjsrR0FBckIscUJBQXFCLGFBRnJCLENBQUMsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDOzsyRkFFcEQscUJBQXFCO2tCQUhqQyxRQUFRO21CQUFDO29CQUNSLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztpQkFDaEU7OzBCQUlJLFFBQVE7OzBCQUFJLFFBQVE7OzBCQUNwQixNQUFNOzJCQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzs7MEJBQzlDLFFBQVE7OzBCQUNSLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBmb3J3YXJkUmVmLFxuICBJbmplY3QsXG4gIE1vZHVsZVdpdGhQcm92aWRlcnMsXG4gIE5nTW9kdWxlLFxuICBPcHRpb25hbCxcbiAgU2tpcFNlbGYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgybVNQVRPTU9fUk9VVEVSX0VOQUJMRUQgYXMgTUFUT01PX1JPVVRFUl9FTkFCTEVEIH0gZnJvbSAnbmd4LW1hdG9tby1jbGllbnQvY29yZSc7XG5pbXBvcnQge1xuICBNQVRPTU9fUk9VVEVSX0NPTkZJR1VSQVRJT04sXG4gIE1hdG9tb1JvdXRlckNvbmZpZ3VyYXRpb25XaXRoSW50ZXJjZXB0b3JzLFxufSBmcm9tICcuL2NvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgcHJvdmlkZUludGVyY2VwdG9ycyB9IGZyb20gJy4vaW50ZXJjZXB0b3InO1xuaW1wb3J0IHsgTWF0b21vUm91dGVyIH0gZnJvbSAnLi9tYXRvbW8tcm91dGVyLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE1BVE9NT19ST1VURVJfRU5BQkxFRCwgdXNlVmFsdWU6IHRydWUgfV0sXG59KVxuZXhwb3J0IGNsYXNzIE1hdG9tb1JvdXRlck1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcm91dGVyOiBNYXRvbW9Sb3V0ZXIsXG4gICAgQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50PzogTWF0b21vUm91dGVyTW9kdWxlLFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ3hNYXRvbW9Sb3V0ZXJNb2R1bGUpKVxuICAgIEBPcHRpb25hbCgpXG4gICAgQFNraXBTZWxmKClcbiAgICBwYXJlbnREZXByZWNhdGVkPzogTmd4TWF0b21vUm91dGVyTW9kdWxlLFxuICApIHtcbiAgICBpZiAoIXBhcmVudCAmJiAhcGFyZW50RGVwcmVjYXRlZCkge1xuICAgICAgLy8gRG8gbm90IGluaXRpYWxpemUgaWYgaXQgaXMgYWxyZWFkeSAoYnkgYSBwYXJlbnQgbW9kdWxlKVxuICAgICAgdGhpcy5yb3V0ZXIuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBmb3JSb290KFxuICAgIGNvbmZpZ1dpdGhJbnRlcmNlcHRvcnM6IE1hdG9tb1JvdXRlckNvbmZpZ3VyYXRpb25XaXRoSW50ZXJjZXB0b3JzID0ge30sXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TWF0b21vUm91dGVyTW9kdWxlPiB7XG4gICAgLy8gTm90ZTogbm90IHVzaW5nIFwicmVzdFwiIHN5bnRheCBoZXJlLCBpbiBvcmRlciB0byBhdm9pZCBhbnkgZGVwZW5kZW5jeSBvbiB0c2xpYiAoYW5kIHJlZHVjZSBwYWNrYWdlIHNpemUpXG4gICAgLy8gVGhlIG9ubHkgZHJhd2JhY2sgb2YgdGhpcyBpcyB0aGF0IE1BVE9NT19ST1VURVJfQ09ORklHVVJBVElPTiB3aWxsIGFjdHVhbGx5XG4gICAgLy8gY29udGFpbiBhIHJlZmVyZW5jZSB0byBwcm92aWRlZCBpbnRlcmNlcHRvcnNcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE1hdG9tb1JvdXRlck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IE1BVE9NT19ST1VURVJfQ09ORklHVVJBVElPTiwgdXNlVmFsdWU6IGNvbmZpZ1dpdGhJbnRlcmNlcHRvcnMgfSxcbiAgICAgICAgcHJvdmlkZUludGVyY2VwdG9ycyhjb25maWdXaXRoSW50ZXJjZXB0b3JzLmludGVyY2VwdG9ycyksXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2UgTWF0b21vUm91dGVyTW9kdWxlIGluc3RlYWRcbiAqIEBicmVha2luZy1jaGFuZ2UgNy4wLjBcbiAqL1xuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBNQVRPTU9fUk9VVEVSX0VOQUJMRUQsIHVzZVZhbHVlOiB0cnVlIH1dLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hNYXRvbW9Sb3V0ZXJNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJvdXRlcjogTWF0b21vUm91dGVyLFxuICAgIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudD86IE1hdG9tb1JvdXRlck1vZHVsZSxcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmd4TWF0b21vUm91dGVyTW9kdWxlKSlcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBTa2lwU2VsZigpXG4gICAgcGFyZW50RGVwcmVjYXRlZD86IE5neE1hdG9tb1JvdXRlck1vZHVsZSxcbiAgKSB7XG4gICAgaWYgKCFwYXJlbnQgJiYgIXBhcmVudERlcHJlY2F0ZWQpIHtcbiAgICAgIC8vIERvIG5vdCBpbml0aWFsaXplIGlmIGl0IGlzIGFscmVhZHkgKGJ5IGEgcGFyZW50IG1vZHVsZSlcbiAgICAgIHRoaXMucm91dGVyLmluaXRpYWxpemUoKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZm9yUm9vdChcbiAgICBjb25maWdXaXRoSW50ZXJjZXB0b3JzOiBNYXRvbW9Sb3V0ZXJDb25maWd1cmF0aW9uV2l0aEludGVyY2VwdG9ycyA9IHt9LFxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE5neE1hdG9tb1JvdXRlck1vZHVsZT4ge1xuICAgIC8vIE5vdGU6IG5vdCB1c2luZyBcInJlc3RcIiBzeW50YXggaGVyZSwgaW4gb3JkZXIgdG8gYXZvaWQgYW55IGRlcGVuZGVuY3kgb24gdHNsaWIgKGFuZCByZWR1Y2UgcGFja2FnZSBzaXplKVxuICAgIC8vIFRoZSBvbmx5IGRyYXdiYWNrIG9mIHRoaXMgaXMgdGhhdCBNQVRPTU9fUk9VVEVSX0NPTkZJR1VSQVRJT04gd2lsbCBhY3R1YWxseVxuICAgIC8vIGNvbnRhaW4gYSByZWZlcmVuY2UgdG8gcHJvdmlkZWQgaW50ZXJjZXB0b3JzXG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ3hNYXRvbW9Sb3V0ZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBNQVRPTU9fUk9VVEVSX0NPTkZJR1VSQVRJT04sIHVzZVZhbHVlOiBjb25maWdXaXRoSW50ZXJjZXB0b3JzIH0sXG4gICAgICAgIHByb3ZpZGVJbnRlcmNlcHRvcnMoY29uZmlnV2l0aEludGVyY2VwdG9ycy5pbnRlcmNlcHRvcnMpLFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=