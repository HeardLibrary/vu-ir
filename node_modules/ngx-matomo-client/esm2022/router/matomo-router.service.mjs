import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, Optional, PLATFORM_ID } from '@angular/core';
import { NavigationEnd } from '@angular/router';
import { ɵrunOnce as runOnce } from 'ngx-matomo-client/core';
import { combineLatest, forkJoin, from, identity, of, } from 'rxjs';
import { concatMap, defaultIfEmpty, delay, distinctUntilChanged, filter, map, mapTo, switchMap, take, tap, } from 'rxjs/operators';
import { INTERNAL_ROUTER_CONFIGURATION, } from './configuration';
import { invalidInterceptorsProviderError, ROUTER_ALREADY_INITIALIZED_ERROR } from './errors';
import { MATOMO_ROUTER_INTERCEPTORS } from './interceptor';
import { MATOMO_PAGE_TITLE_PROVIDER } from './page-title-providers';
import { MATOMO_PAGE_URL_PROVIDER } from './page-url-provider';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "ngx-matomo-client/core";
function isNavigationEnd(event) {
    return event instanceof NavigationEnd;
}
function coerceRegExp(input) {
    return typeof input === 'string' ? new RegExp(input) : input;
}
function coerceRegExpArray(input) {
    if (!input) {
        return [];
    }
    return Array.isArray(input) ? input.map(coerceRegExp) : [coerceRegExp(input)];
}
function isNotExcluded(excludeConfig) {
    const exclusions = coerceRegExpArray(excludeConfig);
    return (event) => !exclusions.some(rx => event.urlAfterRedirects.match(rx));
}
function stripQueryParams(url) {
    return url.split('?')[0];
}
function defaultNavigationEndComparator(urlExtractor) {
    return (eventA, eventB) => urlExtractor(eventA) === urlExtractor(eventB);
}
function getNavigationEndComparator(config) {
    switch (config.navigationEndComparator) {
        case 'fullUrl':
            return defaultNavigationEndComparator(event => event.urlAfterRedirects);
        case 'ignoreQueryParams':
            return defaultNavigationEndComparator(event => stripQueryParams(event.urlAfterRedirects));
        default:
            return config.navigationEndComparator;
    }
}
export class MatomoRouter {
    constructor(router, platformId, config, pageTitleProvider, pageUrlProvider, tracker, interceptors) {
        this.router = router;
        this.platformId = platformId;
        this.config = config;
        this.pageTitleProvider = pageTitleProvider;
        this.pageUrlProvider = pageUrlProvider;
        this.tracker = tracker;
        this.interceptors = interceptors;
        this.initialize = runOnce(() => {
            if (this.config.disabled || !isPlatformBrowser(this.platformId)) {
                // Do not set-up router if globally disabled or running on server
                return;
            }
            const delayOp = this.config.delay === -1 ? identity : delay(this.config.delay);
            const navigationEndComparator = getNavigationEndComparator(this.config);
            this.router.events
                .pipe(
            // Take only NavigationEnd events
            filter(isNavigationEnd), 
            // Filter out excluded urls
            filter(isNotExcluded(this.config.exclude)), 
            // Filter out NavigationEnd events to ignore, e.g. when url does not actually change (component reload)
            distinctUntilChanged(navigationEndComparator), 
            // Optionally add some delay
            delayOp, 
            // Set default page title & url
            switchMap(event => this.presetPageTitleAndUrl(event).pipe(map(({ pageUrl }) => ({ pageUrl, event })))), 
            // Run interceptors then track page view
            concatMap(({ event, pageUrl }) => this.callInterceptors(event).pipe(tap(() => this.trackPageView(pageUrl)))))
                .subscribe();
        }, ROUTER_ALREADY_INITIALIZED_ERROR);
        if (interceptors && !Array.isArray(interceptors)) {
            throw invalidInterceptorsProviderError();
        }
    }
    /** @deprecated use {@link initialize initialize()} instead */
    init() {
        this.initialize();
    }
    callInterceptors(event) {
        if (this.interceptors) {
            return forkJoin(this.interceptors.map(interceptor => {
                const result = interceptor.beforePageTrack(event);
                const result$ = result == null ? of(undefined) : from(result);
                // Must not be an empty observable (otherwise forkJoin would complete without waiting others)
                return result$.pipe(take(1), defaultIfEmpty(undefined));
            })).pipe(mapTo(undefined), defaultIfEmpty(undefined));
        }
        else {
            return of(undefined);
        }
    }
    presetPageTitleAndUrl(event) {
        const title$ = this.config.trackPageTitle
            ? this.pageTitleProvider
                .getCurrentPageTitle(event)
                .pipe(tap(pageTitle => this.tracker.setDocumentTitle(pageTitle)))
            : of(undefined);
        const url$ = this.pageUrlProvider
            .getCurrentPageUrl(event)
            .pipe(tap(pageUrl => this.tracker.setCustomUrl(pageUrl)));
        return combineLatest([title$, url$]).pipe(map(([_, pageUrl]) => ({ pageUrl })));
    }
    trackPageView(pageUrl) {
        this.tracker.trackPageView();
        if (this.config.enableLinkTracking) {
            this.tracker.enableLinkTracking(this.config.enableLinkTracking === 'enable-pseudo');
        }
        // Set referrer for next page view
        this.tracker.setReferrerUrl(pageUrl);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoRouter, deps: [{ token: i1.Router }, { token: PLATFORM_ID }, { token: INTERNAL_ROUTER_CONFIGURATION }, { token: MATOMO_PAGE_TITLE_PROVIDER }, { token: MATOMO_PAGE_URL_PROVIDER }, { token: i2.MatomoTracker }, { token: MATOMO_ROUTER_INTERCEPTORS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoRouter, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoRouter, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.Router }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [INTERNAL_ROUTER_CONFIGURATION]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MATOMO_PAGE_TITLE_PROVIDER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MATOMO_PAGE_URL_PROVIDER]
                }] }, { type: i2.MatomoTracker }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MATOMO_ROUTER_INTERCEPTORS]
                }] }] });
//# sourceMappingURL=data:application/json;base64,