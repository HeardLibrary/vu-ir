import { inject, InjectionToken } from '@angular/core';
import { ÉµINTERNAL_MATOMO_CONFIGURATION as INTERNAL_MATOMO_CONFIGURATION, } from 'ngx-matomo-client/core';
export const MATOMO_ROUTER_CONFIGURATION = new InjectionToken('MATOMO_ROUTER_CONFIGURATION');
export const DEFAULT_ROUTER_CONFIGURATION = {
    prependBaseHref: true,
    trackPageTitle: true,
    delay: 0,
    exclude: [],
    navigationEndComparator: 'fullUrl',
};
export const INTERNAL_ROUTER_CONFIGURATION = new InjectionToken('INTERNAL_ROUTER_CONFIGURATION', {
    factory: () => {
        const { disabled, enableLinkTracking } = inject(INTERNAL_MATOMO_CONFIGURATION);
        const routerConfig = inject(MATOMO_ROUTER_CONFIGURATION, { optional: true }) || {};
        return { ...DEFAULT_ROUTER_CONFIGURATION, ...routerConfig, enableLinkTracking, disabled };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1tYXRvbW8tY2xpZW50L3JvdXRlci9jb25maWd1cmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFFTCw4QkFBOEIsSUFBSSw2QkFBNkIsR0FDaEUsTUFBTSx3QkFBd0IsQ0FBQztBQUdoQyxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxJQUFJLGNBQWMsQ0FDM0QsNkJBQTZCLENBQzlCLENBQUM7QUE0RUYsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQXdDO0lBQy9FLGVBQWUsRUFBRSxJQUFJO0lBQ3JCLGNBQWMsRUFBRSxJQUFJO0lBQ3BCLEtBQUssRUFBRSxDQUFDO0lBQ1IsT0FBTyxFQUFFLEVBQUU7SUFDWCx1QkFBdUIsRUFBRSxTQUFTO0NBQ25DLENBQUM7QUFTRixNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRyxJQUFJLGNBQWMsQ0FDN0QsK0JBQStCLEVBQy9CO0lBQ0UsT0FBTyxFQUFFLEdBQUcsRUFBRTtRQUNaLE1BQU0sRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxNQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUMvRSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsMkJBQTJCLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFbkYsT0FBTyxFQUFFLEdBQUcsNEJBQTRCLEVBQUUsR0FBRyxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDNUYsQ0FBQztDQUNGLENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgSW5qZWN0aW9uVG9rZW4sIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5hdmlnYXRpb25FbmQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtcbiAgSW50ZXJuYWxNYXRvbW9Db25maWd1cmF0aW9uLFxuICDJtUlOVEVSTkFMX01BVE9NT19DT05GSUdVUkFUSU9OIGFzIElOVEVSTkFMX01BVE9NT19DT05GSUdVUkFUSU9OLFxufSBmcm9tICduZ3gtbWF0b21vLWNsaWVudC9jb3JlJztcbmltcG9ydCB7IE1hdG9tb1JvdXRlckludGVyY2VwdG9yLCBNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvckZuIH0gZnJvbSAnLi9pbnRlcmNlcHRvcic7XG5cbmV4cG9ydCBjb25zdCBNQVRPTU9fUk9VVEVSX0NPTkZJR1VSQVRJT04gPSBuZXcgSW5qZWN0aW9uVG9rZW48TWF0b21vUm91dGVyQ29uZmlndXJhdGlvbj4oXG4gICdNQVRPTU9fUk9VVEVSX0NPTkZJR1VSQVRJT04nLFxuKTtcblxuZXhwb3J0IHR5cGUgRXhjbHVzaW9uQ29uZmlnID0gc3RyaW5nIHwgUmVnRXhwIHwgKHN0cmluZyB8IFJlZ0V4cClbXTtcbmV4cG9ydCB0eXBlIE5hdmlnYXRpb25FbmRDb21wYXJhdG9yID0gKFxuICBwcmV2aW91c05hdmlnYXRpb25FbmQ6IE5hdmlnYXRpb25FbmQsXG4gIGN1cnJlbnROYXZpZ2F0aW9uRW5kOiBOYXZpZ2F0aW9uRW5kLFxuKSA9PiBib29sZWFuO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hdG9tb1JvdXRlckNvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogU2V0IHdoZXRoZXIgdGhlIGFwcGxpY2F0aW9uIGJhc2UgaHJlZiBzaG91bGQgYmUgaW5jbHVkZWQgaW4gTWF0b21vIHRyYWNrZWQgdXJsc1xuICAgKlxuICAgKiBPcHRpb25hbCwgZGVmYXVsdCBpcyBgdHJ1ZWBcbiAgICovXG4gIHByZXBlbmRCYXNlSHJlZj86IGJvb2xlYW47IC8vIERlZmF1bHQgdHJ1ZSBvciBmYWxzZT9cblxuICAvKipcbiAgICogU2V0IHdoZXRoZXIgdGhlIHBhZ2UgdGl0bGUgc2hvdWxkIGJlIHNldCB3aGVuIHRyYWNraW5nIHBhZ2Ugdmlld3NcbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHNldCB0byBgZmFsc2VgLCBNYXRvbW8gaXMgbGlrZWx5IHRvIHN0aWxsIHVzZSB0aGUgaW5pdGlhbCBkb2N1bWVudCB0aXRsZSBmb3IgYWxsXG4gICAqIHRyYWNrZWQgcGFnZSB2aWV3cy5cbiAgICpcbiAgICogT3B0aW9uYWwsIGRlZmF1bHQgaXMgYHRydWVgXG4gICAqL1xuICB0cmFja1BhZ2VUaXRsZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNldCBhIGRlbGF5IGFmdGVyIG5hdmlnYXRpb24gZXZlbnQsIGJlZm9yZSB0aGUgcGFnZSB2aWV3IGlzIHRyYWNrZWQuIFRoaXMgaXMgdXNlZnVsIHRvIGxldCBhXG4gICAqIGNoYW5jZSB0byB0aGUgY29tcG9uZW50cyB0byB1cGRhdGUgZG9jdW1lbnQgdGl0bGUuXG4gICAqXG4gICAqIFNldCBpdCB0byAwICh0aGUgZGVmYXVsdCkgdG8gZXhlY3V0ZSB0cmFja2luZyBhc3luY2hyb25vdXNseSB3aXRob3V0IGZ1cnRoZXIgZGVsYXlcbiAgICogU2V0IGl0IHRvIC0xLCB0byBleGVjdXRlIHRyYWNraW5nIHN5bmNocm9ub3VzbHkgKG5vdCByZWNvbW1lbmRlZClcbiAgICpcbiAgICogT3B0aW9uYWwsIGRlZmF1bHQgaXMgYDBgIChidXQgc3RpbGwgYXN5bmNocm9ub3VzKVxuICAgKi9cbiAgZGVsYXk/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFBhc3Mgc29tZSByZWd1bGFyIGV4cHJlc3Npb25zIHRvIGV4Y2x1ZGUgc29tZSB1cmxzIGZyb20gYmVpbmcgdHJhY2tlZCBhcyBwYWdlIHZpZXdzXG4gICAqXG4gICAqIE9wdGlvbmFsLCBkZWZhdWx0IGlzIG5vIHVybCBleGNsdWRlZFxuICAgKi9cbiAgZXhjbHVkZT86IEV4Y2x1c2lvbkNvbmZpZztcblxuICAvKipcbiAgICogQ3VzdG9tIHVybCBjb21wYXJhdG9yIHRvIGRldGVjdCB1cmwgY2hhbmdlIGJldHdlZW4gQW5ndWxhciByb3V0ZSBuYXZpZ2F0aW9ucy5cbiAgICpcbiAgICogVGhpcyBtYXkgYmUgdXNlZnVsLCBiZWNhdXNlIGJ5IGRlZmF1bHQgYWxsIGBOYXZpZ2F0aW9uRW5kYCBldmVudHMgd2lsbCB0cmlnZ2VyIGEgcGFnZSB0cmFjayBhbmQgdGhpcyBtYXkgaGFwcGVuXG4gICAqIGFmdGVyIHF1ZXJ5IHBhcmFtcyBjaGFuZ2Ugb25seSAod2l0aG91dCB1cmwgYWN0dWFsbHkgY2hhbmdpbmcpLlxuICAgKlxuICAgKiBZb3UgY2FuIGRlZmluZSBhIGN1c3RvbSBjb21wYXJhdG9yIGhlcmUgdG8gY29tcGFyZSB1cmwgYnkgaWdub3JpbmcgcXVlcnkgcGFyYW1zLlxuICAgKlxuICAgKiBOb3RlOiB0aGlzIGlzIGRpZmZlcmVudCBmcm9tIHByb3ZpZGluZyB0aGUgdXJsIHNlbnQgdG8gTWF0b21vIGZvciBhY3R1YWwgdHJhY2tpbmcuIFRoZSB1cmwgc2VudCB0byBNYXRvbW8gd2lsbCBiZVxuICAgKiB0aGUgZnVsbCBwYWdlIHVybCwgaW5jbHVkaW5nIGFueSBiYXNlIGhyZWYsIGFuZCBpcyBjb25maWd1cmVkIHVzaW5nIGEge0BsaW5rIFBhZ2VVcmxQcm92aWRlcn0gKHNlZVxuICAgKiBgTUFUT01PX1BBR0VfVVJMX1BST1ZJREVSYCB0b2tlbikuXG4gICAqXG4gICAqIE9wdGlvbmFsLCBkZWZhdWx0IGlzIHRvIGNvbXBhcmUgYE5hdmlnYXRpb25FbmQudXJsQWZ0ZXJSZWRpcmVjdHNgXG4gICAqXG4gICAqIFBvc3NpYmxlIHZhbHVlczpcbiAgICogLSBgJ2Z1bGxVcmwnYCAob3IgdW5kZWZpbmVkKTogZGVmYXVsdCB2YWx1ZSwgY29tcGFyZSB1c2luZyBgTmF2aWdhdGlvbkVuZC51cmxBZnRlclJlZGlyZWN0c2BcbiAgICogLSBgJ2lnbm9yZVF1ZXJ5UGFyYW1zJ2A6IGNvbXBhcmUgdXNpbmcgYE5hdmlnYXRpb25FbmQudXJsQWZ0ZXJSZWRpcmVjdHNgIGJ1dCBpZ25vcmluZyBxdWVyeSBwYXJhbXNcbiAgICogLSBgTmF2aWdhdGlvbkVuZENvbXBhcmF0b3JgOiBjb21wYXJlIHVzaW5nIGEgY3VzdG9tIGBOYXZpZ2F0aW9uRW5kQ29tcGFyYXRvcmAgZnVuY3Rpb25cbiAgICovXG4gIG5hdmlnYXRpb25FbmRDb21wYXJhdG9yPzogTmF2aWdhdGlvbkVuZENvbXBhcmF0b3IgfCAnaWdub3JlUXVlcnlQYXJhbXMnIHwgJ2Z1bGxVcmwnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1hdG9tb1JvdXRlckNvbmZpZ3VyYXRpb25XaXRoSW50ZXJjZXB0b3JzIGV4dGVuZHMgTWF0b21vUm91dGVyQ29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBJbnRlcmNlcHRvcnMgdHlwZXMgdG8gcmVnaXN0ZXIuXG4gICAqXG4gICAqIEZvciBtb3JlIGNvbXBsZXggc2NlbmFyaW9zLCBpdCBpcyBwb3NzaWJsZSB0byBjb25maWd1cmUgYW55IGludGVyY2VwdG9yIGJ5XG4gICAqIHByb3ZpZGluZyB0b2tlbiBgTUFUT01PX1JPVVRFUl9JTlRFUkNFUFRPUlNgIGFzIGBtdWx0aWAgcHJvdmlkZXIocykuXG4gICAqL1xuICBpbnRlcmNlcHRvcnM/OiAoVHlwZTxNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvcj4gfCBNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvckZuKVtdO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9ST1VURVJfQ09ORklHVVJBVElPTjogUmVxdWlyZWQ8TWF0b21vUm91dGVyQ29uZmlndXJhdGlvbj4gPSB7XG4gIHByZXBlbmRCYXNlSHJlZjogdHJ1ZSxcbiAgdHJhY2tQYWdlVGl0bGU6IHRydWUsXG4gIGRlbGF5OiAwLFxuICBleGNsdWRlOiBbXSxcbiAgbmF2aWdhdGlvbkVuZENvbXBhcmF0b3I6ICdmdWxsVXJsJyxcbn07XG5cbmV4cG9ydCB0eXBlIEludGVybmFsR2xvYmFsQ29uZmlndXJhdGlvbiA9IFBpY2s8XG4gIEludGVybmFsTWF0b21vQ29uZmlndXJhdGlvbixcbiAgJ2VuYWJsZUxpbmtUcmFja2luZycgfCAnZGlzYWJsZWQnXG4+O1xuZXhwb3J0IHR5cGUgSW50ZXJuYWxSb3V0ZXJDb25maWd1cmF0aW9uID0gUmVxdWlyZWQ8TWF0b21vUm91dGVyQ29uZmlndXJhdGlvbj4gJlxuICBJbnRlcm5hbEdsb2JhbENvbmZpZ3VyYXRpb247XG5cbmV4cG9ydCBjb25zdCBJTlRFUk5BTF9ST1VURVJfQ09ORklHVVJBVElPTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxJbnRlcm5hbFJvdXRlckNvbmZpZ3VyYXRpb24+KFxuICAnSU5URVJOQUxfUk9VVEVSX0NPTkZJR1VSQVRJT04nLFxuICB7XG4gICAgZmFjdG9yeTogKCkgPT4ge1xuICAgICAgY29uc3QgeyBkaXNhYmxlZCwgZW5hYmxlTGlua1RyYWNraW5nIH0gPSBpbmplY3QoSU5URVJOQUxfTUFUT01PX0NPTkZJR1VSQVRJT04pO1xuICAgICAgY29uc3Qgcm91dGVyQ29uZmlnID0gaW5qZWN0KE1BVE9NT19ST1VURVJfQ09ORklHVVJBVElPTiwgeyBvcHRpb25hbDogdHJ1ZSB9KSB8fCB7fTtcblxuICAgICAgcmV0dXJuIHsgLi4uREVGQVVMVF9ST1VURVJfQ09ORklHVVJBVElPTiwgLi4ucm91dGVyQ29uZmlnLCBlbmFibGVMaW5rVHJhY2tpbmcsIGRpc2FibGVkIH07XG4gICAgfSxcbiAgfSxcbik7XG4iXX0=