import { inject, Injectable, InjectionToken } from '@angular/core';
import { MatomoTracker } from 'ngx-matomo-client/core';
import { MatomoRouteInterceptorBase } from './route-interceptor-base';
import * as i0 from "@angular/core";
export const DEFAULT_DATA_KEY = 'matomo';
/** Token to define the route's data key to be looked-up by `MatomoRouteDataInterceptor`  */
export const MATOMO_ROUTE_DATA_KEY = new InjectionToken('MATOMO_ROUTE_DATA_KEY', {
    providedIn: 'root',
    factory: () => DEFAULT_DATA_KEY,
});
/**
 * Simple interceptor looking at 'matomo' key of route's data for tracking.
 *
 * It is possible to extend this class or {@link MatomoRouteInterceptorBase}
 * for custom behavior (to use another data key, etc.)
 *
 * @example
 * // Using provided MatomoRouteDataInterceptor (looks into 'matomo' data key)
 * const routes: Routes = [
 *   {
 *     path: '/hello',
 *     component: HelloComponent,
 *     data: {
 *       matomo: {
 *         title: 'Page title',
 *       } as MatomoRouteData
 *     }
 *   },
 * ];
 *
 * NgxMatomoRouterModule.forRoot({
 *   interceptors: [MatomoRouteDataInterceptor],
 * }),
 *
 * @example
 * // Using custom 'myCustomAnalyticsKey' data key
 * const routes: Routes = [
 *   {
 *     path: '/hello',
 *     component: HelloComponent,
 *     data: {
 *       myCustomAnalyticsKey: {
 *         title: 'Page title',
 *       } as MatomoRouteData
 *     }
 *   },
 * ];
 *
 * @Injectable()
 * export class MyCustomInterceptor extends MatomoRouteDataInterceptor {
 *   readonly dataKey = 'myCustomAnalyticsKey';
 * }
 *
 * NgxMatomoRouterModule.forRoot({
 *   interceptors: [MyCustomInterceptor],
 * }),
 *
 * @see MatomoRouteInterceptorBase
 * @see MatomoRouteData
 */
export class MatomoRouteDataInterceptor extends MatomoRouteInterceptorBase {
    constructor() {
        super(...arguments);
        this.tracker = inject(MatomoTracker);
        this.dataKey = inject(MATOMO_ROUTE_DATA_KEY);
    }
    extractRouteData(route) {
        return route.data[this.dataKey];
    }
    processRouteData(data) {
        if (!data) {
            return;
        }
        if (data.title) {
            this.tracker.setDocumentTitle(data.title);
        }
        if (data.ecommerce) {
            this.tracker.setEcommerceView(data.ecommerce);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoRouteDataInterceptor, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoRouteDataInterceptor }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoRouteDataInterceptor, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUtZGF0YS1pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1tYXRvbW8tY2xpZW50L3JvdXRlci9pbnRlcmNlcHRvcnMvcm91dGUtZGF0YS1pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkUsT0FBTyxFQUF1QixhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFFdEUsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0FBRXpDLDRGQUE0RjtBQUM1RixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBUyx1QkFBdUIsRUFBRTtJQUN2RixVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsZ0JBQWdCO0NBQ2hDLENBQUMsQ0FBQztBQVFIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaURHO0FBRUgsTUFBTSxPQUFPLDBCQUEyQixTQUFRLDBCQUUvQztJQUhEOztRQUlxQixZQUFPLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hDLFlBQU8sR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztLQXFCNUQ7SUFuQlcsZ0JBQWdCLENBQUMsS0FBNkI7UUFDdEQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRVMsZ0JBQWdCLENBQ3hCLElBQWlDO1FBRWpDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxPQUFPO1NBQ1I7UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQztRQUVELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMvQztJQUNILENBQUM7OEdBeEJVLDBCQUEwQjtrSEFBMUIsMEJBQTBCOzsyRkFBMUIsMEJBQTBCO2tCQUR0QyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBNYXRvbW9FQ29tbWVyY2VWaWV3LCBNYXRvbW9UcmFja2VyIH0gZnJvbSAnbmd4LW1hdG9tby1jbGllbnQvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBNYXRvbW9Sb3V0ZUludGVyY2VwdG9yQmFzZSB9IGZyb20gJy4vcm91dGUtaW50ZXJjZXB0b3ItYmFzZSc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0RBVEFfS0VZID0gJ21hdG9tbyc7XG5cbi8qKiBUb2tlbiB0byBkZWZpbmUgdGhlIHJvdXRlJ3MgZGF0YSBrZXkgdG8gYmUgbG9va2VkLXVwIGJ5IGBNYXRvbW9Sb3V0ZURhdGFJbnRlcmNlcHRvcmAgICovXG5leHBvcnQgY29uc3QgTUFUT01PX1JPVVRFX0RBVEFfS0VZID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ01BVE9NT19ST1VURV9EQVRBX0tFWScsIHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICBmYWN0b3J5OiAoKSA9PiBERUZBVUxUX0RBVEFfS0VZLFxufSk7XG5cbi8qKiBTdGFuZGFyZCBwcm9wZXJ0aWVzIHRoYXQgbWF5IGJlIHJlYWQgZnJvbSByb3V0ZSBkYXRhICovXG5leHBvcnQgaW50ZXJmYWNlIE1hdG9tb1JvdXRlRGF0YSB7XG4gIHRpdGxlPzogc3RyaW5nO1xuICBlY29tbWVyY2U/OiBNYXRvbW9FQ29tbWVyY2VWaWV3O1xufVxuXG4vKipcbiAqIFNpbXBsZSBpbnRlcmNlcHRvciBsb29raW5nIGF0ICdtYXRvbW8nIGtleSBvZiByb3V0ZSdzIGRhdGEgZm9yIHRyYWNraW5nLlxuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGV4dGVuZCB0aGlzIGNsYXNzIG9yIHtAbGluayBNYXRvbW9Sb3V0ZUludGVyY2VwdG9yQmFzZX1cbiAqIGZvciBjdXN0b20gYmVoYXZpb3IgKHRvIHVzZSBhbm90aGVyIGRhdGEga2V5LCBldGMuKVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBVc2luZyBwcm92aWRlZCBNYXRvbW9Sb3V0ZURhdGFJbnRlcmNlcHRvciAobG9va3MgaW50byAnbWF0b21vJyBkYXRhIGtleSlcbiAqIGNvbnN0IHJvdXRlczogUm91dGVzID0gW1xuICogICB7XG4gKiAgICAgcGF0aDogJy9oZWxsbycsXG4gKiAgICAgY29tcG9uZW50OiBIZWxsb0NvbXBvbmVudCxcbiAqICAgICBkYXRhOiB7XG4gKiAgICAgICBtYXRvbW86IHtcbiAqICAgICAgICAgdGl0bGU6ICdQYWdlIHRpdGxlJyxcbiAqICAgICAgIH0gYXMgTWF0b21vUm91dGVEYXRhXG4gKiAgICAgfVxuICogICB9LFxuICogXTtcbiAqXG4gKiBOZ3hNYXRvbW9Sb3V0ZXJNb2R1bGUuZm9yUm9vdCh7XG4gKiAgIGludGVyY2VwdG9yczogW01hdG9tb1JvdXRlRGF0YUludGVyY2VwdG9yXSxcbiAqIH0pLFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBVc2luZyBjdXN0b20gJ215Q3VzdG9tQW5hbHl0aWNzS2V5JyBkYXRhIGtleVxuICogY29uc3Qgcm91dGVzOiBSb3V0ZXMgPSBbXG4gKiAgIHtcbiAqICAgICBwYXRoOiAnL2hlbGxvJyxcbiAqICAgICBjb21wb25lbnQ6IEhlbGxvQ29tcG9uZW50LFxuICogICAgIGRhdGE6IHtcbiAqICAgICAgIG15Q3VzdG9tQW5hbHl0aWNzS2V5OiB7XG4gKiAgICAgICAgIHRpdGxlOiAnUGFnZSB0aXRsZScsXG4gKiAgICAgICB9IGFzIE1hdG9tb1JvdXRlRGF0YVxuICogICAgIH1cbiAqICAgfSxcbiAqIF07XG4gKlxuICogQEluamVjdGFibGUoKVxuICogZXhwb3J0IGNsYXNzIE15Q3VzdG9tSW50ZXJjZXB0b3IgZXh0ZW5kcyBNYXRvbW9Sb3V0ZURhdGFJbnRlcmNlcHRvciB7XG4gKiAgIHJlYWRvbmx5IGRhdGFLZXkgPSAnbXlDdXN0b21BbmFseXRpY3NLZXknO1xuICogfVxuICpcbiAqIE5neE1hdG9tb1JvdXRlck1vZHVsZS5mb3JSb290KHtcbiAqICAgaW50ZXJjZXB0b3JzOiBbTXlDdXN0b21JbnRlcmNlcHRvcl0sXG4gKiB9KSxcbiAqXG4gKiBAc2VlIE1hdG9tb1JvdXRlSW50ZXJjZXB0b3JCYXNlXG4gKiBAc2VlIE1hdG9tb1JvdXRlRGF0YVxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWF0b21vUm91dGVEYXRhSW50ZXJjZXB0b3IgZXh0ZW5kcyBNYXRvbW9Sb3V0ZUludGVyY2VwdG9yQmFzZTxcbiAgTWF0b21vUm91dGVEYXRhIHwgdW5kZWZpbmVkXG4+IHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHRyYWNrZXIgPSBpbmplY3QoTWF0b21vVHJhY2tlcik7XG4gIHByb3RlY3RlZCByZWFkb25seSBkYXRhS2V5ID0gaW5qZWN0KE1BVE9NT19ST1VURV9EQVRBX0tFWSk7XG5cbiAgcHJvdGVjdGVkIGV4dHJhY3RSb3V0ZURhdGEocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBNYXRvbW9Sb3V0ZURhdGEgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiByb3V0ZS5kYXRhW3RoaXMuZGF0YUtleV07XG4gIH1cblxuICBwcm90ZWN0ZWQgcHJvY2Vzc1JvdXRlRGF0YShcbiAgICBkYXRhOiBNYXRvbW9Sb3V0ZURhdGEgfCB1bmRlZmluZWQsXG4gICk6IE9ic2VydmFibGU8dm9pZD4gfCBQcm9taXNlPHZvaWQ+IHwgdm9pZCB7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGRhdGEudGl0bGUpIHtcbiAgICAgIHRoaXMudHJhY2tlci5zZXREb2N1bWVudFRpdGxlKGRhdGEudGl0bGUpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmVjb21tZXJjZSkge1xuICAgICAgdGhpcy50cmFja2VyLnNldEVjb21tZXJjZVZpZXcoZGF0YS5lY29tbWVyY2UpO1xuICAgIH1cbiAgfVxufVxuIl19