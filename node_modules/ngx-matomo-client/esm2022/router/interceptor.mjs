import { inject, InjectionToken, INJECTOR, runInInjectionContext, } from '@angular/core';
export const MATOMO_ROUTER_INTERCEPTORS = new InjectionToken('MATOMO_ROUTER_INTERCEPTORS');
/**
 * This is not an ideal implementation, because there exist no easy way to differentiate between a class constructor and a function.
 */
function isInterceptorFn(interceptor) {
    return typeof interceptor.prototype?.beforePageTrack !== 'function';
}
class InterceptorFnAdapter {
    constructor(fn, injector) {
        this.fn = fn;
        this.injector = injector;
    }
    beforePageTrack(event) {
        return runInInjectionContext(this.injector, () => this.fn(event));
    }
}
export function provideInterceptor(typeOrFn) {
    if (isInterceptorFn(typeOrFn)) {
        return {
            provide: MATOMO_ROUTER_INTERCEPTORS,
            multi: true,
            useFactory: () => new InterceptorFnAdapter(typeOrFn, inject(INJECTOR)),
        };
    }
    else {
        return {
            provide: MATOMO_ROUTER_INTERCEPTORS,
            multi: true,
            useClass: typeOrFn,
        };
    }
}
export function provideInterceptors(types) {
    if (!types) {
        return [];
    }
    return types.map(provideInterceptor);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWF0b21vLWNsaWVudC9yb3V0ZXIvaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLE1BQU0sRUFDTixjQUFjLEVBQ2QsUUFBUSxFQUdSLHFCQUFxQixHQUV0QixNQUFNLGVBQWUsQ0FBQztBQUl2QixNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLGNBQWMsQ0FDMUQsNEJBQTRCLENBQzdCLENBQUM7QUFpQkY7O0dBRUc7QUFDSCxTQUFTLGVBQWUsQ0FDdEIsV0FBc0U7SUFFdEUsT0FBTyxPQUFPLFdBQVcsQ0FBQyxTQUFTLEVBQUUsZUFBZSxLQUFLLFVBQVUsQ0FBQztBQUN0RSxDQUFDO0FBRUQsTUFBTSxvQkFBb0I7SUFDeEIsWUFDbUIsRUFBNkIsRUFDN0IsUUFBa0I7UUFEbEIsT0FBRSxHQUFGLEVBQUUsQ0FBMkI7UUFDN0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUNsQyxDQUFDO0lBRUosZUFBZSxDQUFDLEtBQW9CO1FBQ2xDLE9BQU8scUJBQXFCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUNoQyxRQUFtRTtJQUVuRSxJQUFJLGVBQWUsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM3QixPQUFPO1lBQ0wsT0FBTyxFQUFFLDBCQUEwQjtZQUNuQyxLQUFLLEVBQUUsSUFBSTtZQUNYLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkUsQ0FBQztLQUNIO1NBQU07UUFDTCxPQUFPO1lBQ0wsT0FBTyxFQUFFLDBCQUEwQjtZQUNuQyxLQUFLLEVBQUUsSUFBSTtZQUNYLFFBQVEsRUFBRSxRQUFRO1NBQ25CLENBQUM7S0FDSDtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLEtBQWdGO0lBRWhGLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDVixPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDdkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGluamVjdCxcbiAgSW5qZWN0aW9uVG9rZW4sXG4gIElOSkVDVE9SLFxuICBJbmplY3RvcixcbiAgUHJvdmlkZXIsXG4gIHJ1bkluSW5qZWN0aW9uQ29udGV4dCxcbiAgVHlwZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uRW5kIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNvbnN0IE1BVE9NT19ST1VURVJfSU5URVJDRVBUT1JTID0gbmV3IEluamVjdGlvblRva2VuPE1hdG9tb1JvdXRlckludGVyY2VwdG9yW10+KFxuICAnTUFUT01PX1JPVVRFUl9JTlRFUkNFUFRPUlMnLFxuKTtcblxuLyoqIEludGVyY2VwdG9yIHVzZWQgdG8gaG9vayBqdXN0IGJlZm9yZSBldmVyeSBwYWdlIHRyYWNraW5nICovXG5leHBvcnQgdHlwZSBNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvckZuID0gKFxuICBldmVudDogTmF2aWdhdGlvbkVuZCxcbikgPT4gT2JzZXJ2YWJsZTx2b2lkPiB8IFByb21pc2U8dm9pZD4gfCB2b2lkO1xuXG4vKiogSW50ZXJjZXB0b3IgdXNlZCB0byBob29rIGludG8gdGhlIHBhZ2UgdHJhY2tpbmcgcHJvY2VzcyAqL1xuZXhwb3J0IGludGVyZmFjZSBNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvciB7XG4gIC8qKlxuICAgKiBDYWxsZWQgYWZ0ZXIgYSByb3V0ZXIgZXZlbnQgaGFzIG9jY3VycmVkIGFuZCBiZWZvcmUgcGFnZSB2aWV3IGhhcyBiZWVuIHRyYWNrZWQgKGkuZS4gYmVmb3JlIGB0cmFja1BhZ2VWaWV3KClgIGhhcyBiZWVuIGNhbGxlZClcbiAgICpcbiAgICogSWYgYW4gT2JzZXJ2YWJsZSBvciBhIFByb21pc2UgaXMgcmV0dXJuZWQsIHRoZSBvYnNlcnZhYmxlIChmaXJzdCBlbWlzc2lvbiBvciBjb21wbGV0aW9uKSBvciBwcm9taXNlIHJlc29sdXRpb24gaXMgYXdhaXRlZCBiZWZvcmUgdHJhY2tpbmcgY2FsbC5cbiAgICovXG4gIGJlZm9yZVBhZ2VUcmFjayhldmVudDogTmF2aWdhdGlvbkVuZCk6IE9ic2VydmFibGU8dm9pZD4gfCBQcm9taXNlPHZvaWQ+IHwgdm9pZDtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIG5vdCBhbiBpZGVhbCBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVyZSBleGlzdCBubyBlYXN5IHdheSB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gYSBjbGFzcyBjb25zdHJ1Y3RvciBhbmQgYSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gaXNJbnRlcmNlcHRvckZuKFxuICBpbnRlcmNlcHRvcjogVHlwZTxNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvcj4gfCBNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvckZuLFxuKTogaW50ZXJjZXB0b3IgaXMgTWF0b21vUm91dGVySW50ZXJjZXB0b3JGbiB7XG4gIHJldHVybiB0eXBlb2YgaW50ZXJjZXB0b3IucHJvdG90eXBlPy5iZWZvcmVQYWdlVHJhY2sgIT09ICdmdW5jdGlvbic7XG59XG5cbmNsYXNzIEludGVyY2VwdG9yRm5BZGFwdGVyIGltcGxlbWVudHMgTWF0b21vUm91dGVySW50ZXJjZXB0b3Ige1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZuOiBNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvckZuLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5qZWN0b3I6IEluamVjdG9yLFxuICApIHt9XG5cbiAgYmVmb3JlUGFnZVRyYWNrKGV2ZW50OiBOYXZpZ2F0aW9uRW5kKTogT2JzZXJ2YWJsZTx2b2lkPiB8IFByb21pc2U8dm9pZD4gfCB2b2lkIHtcbiAgICByZXR1cm4gcnVuSW5JbmplY3Rpb25Db250ZXh0KHRoaXMuaW5qZWN0b3IsICgpID0+IHRoaXMuZm4oZXZlbnQpKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUludGVyY2VwdG9yKFxuICB0eXBlT3JGbjogVHlwZTxNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvcj4gfCBNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvckZuLFxuKTogUHJvdmlkZXIge1xuICBpZiAoaXNJbnRlcmNlcHRvckZuKHR5cGVPckZuKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwcm92aWRlOiBNQVRPTU9fUk9VVEVSX0lOVEVSQ0VQVE9SUyxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlRmFjdG9yeTogKCkgPT4gbmV3IEludGVyY2VwdG9yRm5BZGFwdGVyKHR5cGVPckZuLCBpbmplY3QoSU5KRUNUT1IpKSxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICBwcm92aWRlOiBNQVRPTU9fUk9VVEVSX0lOVEVSQ0VQVE9SUyxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlQ2xhc3M6IHR5cGVPckZuLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVJbnRlcmNlcHRvcnMoXG4gIHR5cGVzOiAoVHlwZTxNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvcj4gfCBNYXRvbW9Sb3V0ZXJJbnRlcmNlcHRvckZuKVtdIHwgdW5kZWZpbmVkLFxuKTogUHJvdmlkZXJbXSB7XG4gIGlmICghdHlwZXMpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICByZXR1cm4gdHlwZXMubWFwKHByb3ZpZGVJbnRlcmNlcHRvcik7XG59XG4iXX0=