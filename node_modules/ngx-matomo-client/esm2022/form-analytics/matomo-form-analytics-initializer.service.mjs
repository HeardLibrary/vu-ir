import { isPlatformBrowser } from '@angular/common';
import { inject, Injectable, PLATFORM_ID } from '@angular/core';
import { MatomoTracker, ɵappendTrailingSlash as appendTrailingSlash, ɵASYNC_INTERNAL_MATOMO_CONFIGURATION as ASYNC_INTERNAL_MATOMO_CONFIGURATION, ɵgetTrackersConfiguration as getTrackersConfiguration, ɵisAutoConfigurationMode as isAutoConfigurationMode, ɵisExplicitTrackerConfiguration as isExplicitTrackerConfiguration, ɵrunOnce as runOnce, ɵScriptInjector as ScriptInjector, } from 'ngx-matomo-client/core';
import { debounceTime, identity } from 'rxjs';
import { INTERNAL_MATOMO_FORM_ANALYTICS_CONFIGURATION } from './configuration';
import { MatomoFormAnalytics } from './matomo-form-analytics.service';
import * as i0 from "@angular/core";
const DEFAULT_SCRIPT_SUFFIX = 'plugins/FormAnalytics/tracker.min.js';
export class MatomoFormAnalyticsInitializer {
    constructor() {
        this.config = inject(INTERNAL_MATOMO_FORM_ANALYTICS_CONFIGURATION);
        this.coreConfig = inject(ASYNC_INTERNAL_MATOMO_CONFIGURATION);
        this.scriptInjector = inject(ScriptInjector);
        this.tracker = inject(MatomoTracker);
        this.formAnalytics = inject(MatomoFormAnalytics);
        this.platformId = inject(PLATFORM_ID);
        this.initialize = runOnce(async () => {
            // Do not set-up router if running on server
            if (!isPlatformBrowser(this.platformId)) {
                return;
            }
            if (this.config.disabled) {
                this.formAnalytics.disableFormAnalytics();
                return;
            }
            if (this.config.loadScript) {
                const scriptUrl = typeof this.config.loadScript === 'boolean'
                    ? await this.buildDefaultScriptUrl()
                    : this.config.loadScript;
                this.scriptInjector.injectDOMScript(scriptUrl);
            }
            if (this.config.autoScan) {
                const delayOp = this.config.autoScanDelay
                    ? debounceTime(this.config.autoScanDelay)
                    : identity;
                this.pageTrackedSubscription = this.tracker.pageViewTracked
                    .pipe(delayOp)
                    .subscribe(() => this.formAnalytics.scanForForms());
            }
        });
    }
    ngOnDestroy() {
        this.pageTrackedSubscription?.unsubscribe();
    }
    async buildDefaultScriptUrl() {
        const config = await this.coreConfig;
        if (isAutoConfigurationMode(config) && isExplicitTrackerConfiguration(config)) {
            const [mainTracker] = getTrackersConfiguration(config);
            if (mainTracker) {
                return appendTrailingSlash(mainTracker.trackerUrl) + DEFAULT_SCRIPT_SUFFIX;
            }
        }
        throw new Error('Cannot resolve default matomo FormAnalytics plugin script url. ' +
            'Please explicitly provide `loadScript` configuration property instead of `true`');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoFormAnalyticsInitializer, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoFormAnalyticsInitializer, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoFormAnalyticsInitializer, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0b21vLWZvcm0tYW5hbHl0aWNzLWluaXRpYWxpemVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWF0b21vLWNsaWVudC9mb3JtLWFuYWx5dGljcy9tYXRvbW8tZm9ybS1hbmFseXRpY3MtaW5pdGlhbGl6ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBYSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUNMLGFBQWEsRUFDYixvQkFBb0IsSUFBSSxtQkFBbUIsRUFDM0Msb0NBQW9DLElBQUksbUNBQW1DLEVBQzNFLHlCQUF5QixJQUFJLHdCQUF3QixFQUNyRCx3QkFBd0IsSUFBSSx1QkFBdUIsRUFDbkQsK0JBQStCLElBQUksOEJBQThCLEVBQ2pFLFFBQVEsSUFBSSxPQUFPLEVBQ25CLGVBQWUsSUFBSSxjQUFjLEdBQ2xDLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQzVELE9BQU8sRUFBRSw0Q0FBNEMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOztBQUV0RSxNQUFNLHFCQUFxQixHQUFHLHNDQUFzQyxDQUFDO0FBS3JFLE1BQU0sT0FBTyw4QkFBOEI7SUFIM0M7UUFJbUIsV0FBTSxHQUFHLE1BQU0sQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBQzlELGVBQVUsR0FBRyxNQUFNLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUN6RCxtQkFBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN4QyxZQUFPLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hDLGtCQUFhLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDNUMsZUFBVSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQVF6QyxlQUFVLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ3ZDLDRDQUE0QztZQUM1QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUN2QyxPQUFPO2FBQ1I7WUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUN4QixJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Z0JBQzFDLE9BQU87YUFDUjtZQUVELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7Z0JBQzFCLE1BQU0sU0FBUyxHQUNiLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEtBQUssU0FBUztvQkFDekMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixFQUFFO29CQUNwQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7Z0JBRTdCLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ2hEO1lBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDeEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhO29CQUN2QyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO29CQUN6QyxDQUFDLENBQUMsUUFBUSxDQUFDO2dCQUViLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWU7cUJBQ3hELElBQUksQ0FBQyxPQUFPLENBQUM7cUJBQ2IsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQzthQUN2RDtRQUNILENBQUMsQ0FBQyxDQUFDO0tBa0JKO0lBbkRDLFdBQVc7UUFDVCxJQUFJLENBQUMsdUJBQXVCLEVBQUUsV0FBVyxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQWlDTyxLQUFLLENBQUMscUJBQXFCO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUVyQyxJQUFJLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxJQUFJLDhCQUE4QixDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzdFLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUV2RCxJQUFJLFdBQVcsRUFBRTtnQkFDZixPQUFPLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxxQkFBcUIsQ0FBQzthQUM1RTtTQUNGO1FBRUQsTUFBTSxJQUFJLEtBQUssQ0FDYixpRUFBaUU7WUFDL0QsaUZBQWlGLENBQ3BGLENBQUM7SUFDSixDQUFDOzhHQTVEVSw4QkFBOEI7a0hBQTlCLDhCQUE4QixjQUY3QixNQUFNOzsyRkFFUCw4QkFBOEI7a0JBSDFDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgaW5qZWN0LCBJbmplY3RhYmxlLCBPbkRlc3Ryb3ksIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBNYXRvbW9UcmFja2VyLFxuICDJtWFwcGVuZFRyYWlsaW5nU2xhc2ggYXMgYXBwZW5kVHJhaWxpbmdTbGFzaCxcbiAgybVBU1lOQ19JTlRFUk5BTF9NQVRPTU9fQ09ORklHVVJBVElPTiBhcyBBU1lOQ19JTlRFUk5BTF9NQVRPTU9fQ09ORklHVVJBVElPTixcbiAgybVnZXRUcmFja2Vyc0NvbmZpZ3VyYXRpb24gYXMgZ2V0VHJhY2tlcnNDb25maWd1cmF0aW9uLFxuICDJtWlzQXV0b0NvbmZpZ3VyYXRpb25Nb2RlIGFzIGlzQXV0b0NvbmZpZ3VyYXRpb25Nb2RlLFxuICDJtWlzRXhwbGljaXRUcmFja2VyQ29uZmlndXJhdGlvbiBhcyBpc0V4cGxpY2l0VHJhY2tlckNvbmZpZ3VyYXRpb24sXG4gIMm1cnVuT25jZSBhcyBydW5PbmNlLFxuICDJtVNjcmlwdEluamVjdG9yIGFzIFNjcmlwdEluamVjdG9yLFxufSBmcm9tICduZ3gtbWF0b21vLWNsaWVudC9jb3JlJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgaWRlbnRpdHksIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSU5URVJOQUxfTUFUT01PX0ZPUk1fQU5BTFlUSUNTX0NPTkZJR1VSQVRJT04gfSBmcm9tICcuL2NvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgTWF0b21vRm9ybUFuYWx5dGljcyB9IGZyb20gJy4vbWF0b21vLWZvcm0tYW5hbHl0aWNzLnNlcnZpY2UnO1xuXG5jb25zdCBERUZBVUxUX1NDUklQVF9TVUZGSVggPSAncGx1Z2lucy9Gb3JtQW5hbHl0aWNzL3RyYWNrZXIubWluLmpzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE1hdG9tb0Zvcm1BbmFseXRpY3NJbml0aWFsaXplciBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnID0gaW5qZWN0KElOVEVSTkFMX01BVE9NT19GT1JNX0FOQUxZVElDU19DT05GSUdVUkFUSU9OKTtcbiAgcHJpdmF0ZSByZWFkb25seSBjb3JlQ29uZmlnID0gaW5qZWN0KEFTWU5DX0lOVEVSTkFMX01BVE9NT19DT05GSUdVUkFUSU9OKTtcbiAgcHJpdmF0ZSByZWFkb25seSBzY3JpcHRJbmplY3RvciA9IGluamVjdChTY3JpcHRJbmplY3Rvcik7XG4gIHByaXZhdGUgcmVhZG9ubHkgdHJhY2tlciA9IGluamVjdChNYXRvbW9UcmFja2VyKTtcbiAgcHJpdmF0ZSByZWFkb25seSBmb3JtQW5hbHl0aWNzID0gaW5qZWN0KE1hdG9tb0Zvcm1BbmFseXRpY3MpO1xuICBwcml2YXRlIHJlYWRvbmx5IHBsYXRmb3JtSWQgPSBpbmplY3QoUExBVEZPUk1fSUQpO1xuXG4gIHByaXZhdGUgcGFnZVRyYWNrZWRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiB8IHVuZGVmaW5lZDtcblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnBhZ2VUcmFja2VkU3Vic2NyaXB0aW9uPy51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgcmVhZG9ubHkgaW5pdGlhbGl6ZSA9IHJ1bk9uY2UoYXN5bmMgKCkgPT4ge1xuICAgIC8vIERvIG5vdCBzZXQtdXAgcm91dGVyIGlmIHJ1bm5pbmcgb24gc2VydmVyXG4gICAgaWYgKCFpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmZvcm1BbmFseXRpY3MuZGlzYWJsZUZvcm1BbmFseXRpY3MoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25maWcubG9hZFNjcmlwdCkge1xuICAgICAgY29uc3Qgc2NyaXB0VXJsID1cbiAgICAgICAgdHlwZW9mIHRoaXMuY29uZmlnLmxvYWRTY3JpcHQgPT09ICdib29sZWFuJ1xuICAgICAgICAgID8gYXdhaXQgdGhpcy5idWlsZERlZmF1bHRTY3JpcHRVcmwoKVxuICAgICAgICAgIDogdGhpcy5jb25maWcubG9hZFNjcmlwdDtcblxuICAgICAgdGhpcy5zY3JpcHRJbmplY3Rvci5pbmplY3RET01TY3JpcHQoc2NyaXB0VXJsKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25maWcuYXV0b1NjYW4pIHtcbiAgICAgIGNvbnN0IGRlbGF5T3AgPSB0aGlzLmNvbmZpZy5hdXRvU2NhbkRlbGF5XG4gICAgICAgID8gZGVib3VuY2VUaW1lKHRoaXMuY29uZmlnLmF1dG9TY2FuRGVsYXkpXG4gICAgICAgIDogaWRlbnRpdHk7XG5cbiAgICAgIHRoaXMucGFnZVRyYWNrZWRTdWJzY3JpcHRpb24gPSB0aGlzLnRyYWNrZXIucGFnZVZpZXdUcmFja2VkXG4gICAgICAgIC5waXBlKGRlbGF5T3ApXG4gICAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5mb3JtQW5hbHl0aWNzLnNjYW5Gb3JGb3JtcygpKTtcbiAgICB9XG4gIH0pO1xuXG4gIHByaXZhdGUgYXN5bmMgYnVpbGREZWZhdWx0U2NyaXB0VXJsKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgY29uZmlnID0gYXdhaXQgdGhpcy5jb3JlQ29uZmlnO1xuXG4gICAgaWYgKGlzQXV0b0NvbmZpZ3VyYXRpb25Nb2RlKGNvbmZpZykgJiYgaXNFeHBsaWNpdFRyYWNrZXJDb25maWd1cmF0aW9uKGNvbmZpZykpIHtcbiAgICAgIGNvbnN0IFttYWluVHJhY2tlcl0gPSBnZXRUcmFja2Vyc0NvbmZpZ3VyYXRpb24oY29uZmlnKTtcblxuICAgICAgaWYgKG1haW5UcmFja2VyKSB7XG4gICAgICAgIHJldHVybiBhcHBlbmRUcmFpbGluZ1NsYXNoKG1haW5UcmFja2VyLnRyYWNrZXJVcmwpICsgREVGQVVMVF9TQ1JJUFRfU1VGRklYO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdDYW5ub3QgcmVzb2x2ZSBkZWZhdWx0IG1hdG9tbyBGb3JtQW5hbHl0aWNzIHBsdWdpbiBzY3JpcHQgdXJsLiAnICtcbiAgICAgICAgJ1BsZWFzZSBleHBsaWNpdGx5IHByb3ZpZGUgYGxvYWRTY3JpcHRgIGNvbmZpZ3VyYXRpb24gcHJvcGVydHkgaW5zdGVhZCBvZiBgdHJ1ZWAnLFxuICAgICk7XG4gIH1cbn1cbiJdfQ==