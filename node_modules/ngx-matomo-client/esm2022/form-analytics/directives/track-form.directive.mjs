import { booleanAttribute, Directive, ElementRef, HostListener, inject, Input, } from '@angular/core';
import { MatomoFormAnalytics } from '../matomo-form-analytics.service';
import * as i0 from "@angular/core";
export class TrackFormDirective {
    set matomoIgnore(ignore) {
        if (ignore) {
            this.elementRef.nativeElement.setAttribute('data-matomo-ignore', '');
        }
        else {
            this.elementRef.nativeElement.removeAttribute('data-matomo-ignore');
        }
    }
    set matomoTrackForm(name) {
        if (name) {
            this.elementRef.nativeElement.setAttribute('data-matomo-name', name);
        }
        else {
            this.elementRef.nativeElement.removeAttribute('data-matomo-name');
        }
        if (this.initialized) {
            this.track();
        }
    }
    constructor() {
        this.elementRef = inject(ElementRef);
        this.tracker = inject(MatomoFormAnalytics);
        this.initialized = false;
        /** If true, will track a conversion after form submit */
        this.trackConversionOnSubmit = false;
        this.elementRef.nativeElement.setAttribute('data-matomo-form', '');
    }
    ngAfterViewInit() {
        this.track();
        this.initialized = true;
    }
    track() {
        this.tracker.trackForm(this.elementRef);
    }
    trackSubmit() {
        this.tracker.trackFormSubmit(this.elementRef);
    }
    trackConversion() {
        this.tracker.trackFormConversion(this.elementRef);
    }
    trackFormConversionOnSubmit() {
        if (this.trackConversionOnSubmit) {
            this.trackConversion();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: TrackFormDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.2", type: TrackFormDirective, isStandalone: true, selector: "[matomoTrackForm]", inputs: { trackConversionOnSubmit: ["trackConversionOnSubmit", "trackConversionOnSubmit", booleanAttribute], matomoIgnore: ["matomoIgnore", "matomoIgnore", booleanAttribute], matomoTrackForm: "matomoTrackForm" }, host: { listeners: { "submit": "trackFormConversionOnSubmit()" } }, exportAs: ["matomoTrackForm"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: TrackFormDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[matomoTrackForm]',
                    standalone: true,
                    exportAs: 'matomoTrackForm',
                }]
        }], ctorParameters: () => [], propDecorators: { trackConversionOnSubmit: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], matomoIgnore: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], matomoTrackForm: [{
                type: Input
            }], trackFormConversionOnSubmit: [{
                type: HostListener,
                args: ['submit']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2stZm9ybS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWF0b21vLWNsaWVudC9mb3JtLWFuYWx5dGljcy9kaXJlY3RpdmVzL3RyYWNrLWZvcm0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxnQkFBZ0IsRUFDaEIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssR0FDTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7QUFPdkUsTUFBTSxPQUFPLGtCQUFrQjtJQVE3QixJQUE0QyxZQUFZLENBQUMsTUFBZTtRQUN0RSxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN0RTthQUFNO1lBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLG9CQUFvQixDQUFDLENBQUM7U0FDckU7SUFDSCxDQUFDO0lBRUQsSUFBYSxlQUFlLENBQUMsSUFBK0I7UUFDMUQsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDdEU7YUFBTTtZQUNMLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ25FO1FBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUVEO1FBM0JpQixlQUFVLEdBQXdCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRCxZQUFPLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDL0MsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFFNUIseURBQXlEO1FBQ2pCLDRCQUF1QixHQUFHLEtBQUssQ0FBQztRQXVCdEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDMUIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBR0QsMkJBQTJCO1FBQ3pCLElBQUksSUFBSSxDQUFDLHVCQUF1QixFQUFFO1lBQ2hDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN4QjtJQUNILENBQUM7OEdBdERVLGtCQUFrQjtrR0FBbEIsa0JBQWtCLCtJQU1ULGdCQUFnQixrREFFaEIsZ0JBQWdCOzsyRkFSekIsa0JBQWtCO2tCQUw5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsaUJBQWlCO2lCQUM1Qjt3REFPeUMsdUJBQXVCO3NCQUE5RCxLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQUVNLFlBQVk7c0JBQXZELEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBUXpCLGVBQWU7c0JBQTNCLEtBQUs7Z0JBa0NOLDJCQUEyQjtzQkFEMUIsWUFBWTt1QkFBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgYm9vbGVhbkF0dHJpYnV0ZSxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIGluamVjdCxcbiAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0b21vRm9ybUFuYWx5dGljcyB9IGZyb20gJy4uL21hdG9tby1mb3JtLWFuYWx5dGljcy5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21hdG9tb1RyYWNrRm9ybV0nLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBleHBvcnRBczogJ21hdG9tb1RyYWNrRm9ybScsXG59KVxuZXhwb3J0IGNsYXNzIFRyYWNrRm9ybURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8RWxlbWVudD4gPSBpbmplY3QoRWxlbWVudFJlZik7XG4gIHByaXZhdGUgcmVhZG9ubHkgdHJhY2tlciA9IGluamVjdChNYXRvbW9Gb3JtQW5hbHl0aWNzKTtcbiAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gIC8qKiBJZiB0cnVlLCB3aWxsIHRyYWNrIGEgY29udmVyc2lvbiBhZnRlciBmb3JtIHN1Ym1pdCAqL1xuICBASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSkgdHJhY2tDb252ZXJzaW9uT25TdWJtaXQgPSBmYWxzZTtcblxuICBASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSkgc2V0IG1hdG9tb0lnbm9yZShpZ25vcmU6IGJvb2xlYW4pIHtcbiAgICBpZiAoaWdub3JlKSB7XG4gICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWF0b21vLWlnbm9yZScsICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLW1hdG9tby1pZ25vcmUnKTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKSBzZXQgbWF0b21vVHJhY2tGb3JtKG5hbWU6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAobmFtZSkge1xuICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW1hdG9tby1uYW1lJywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1tYXRvbW8tbmFtZScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLnRyYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW1hdG9tby1mb3JtJywgJycpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMudHJhY2soKTtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRyYWNrKCk6IHZvaWQge1xuICAgIHRoaXMudHJhY2tlci50cmFja0Zvcm0odGhpcy5lbGVtZW50UmVmKTtcbiAgfVxuXG4gIHRyYWNrU3VibWl0KCk6IHZvaWQge1xuICAgIHRoaXMudHJhY2tlci50cmFja0Zvcm1TdWJtaXQodGhpcy5lbGVtZW50UmVmKTtcbiAgfVxuXG4gIHRyYWNrQ29udmVyc2lvbigpOiB2b2lkIHtcbiAgICB0aGlzLnRyYWNrZXIudHJhY2tGb3JtQ29udmVyc2lvbih0aGlzLmVsZW1lbnRSZWYpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignc3VibWl0JylcbiAgdHJhY2tGb3JtQ29udmVyc2lvbk9uU3VibWl0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnRyYWNrQ29udmVyc2lvbk9uU3VibWl0KSB7XG4gICAgICB0aGlzLnRyYWNrQ29udmVyc2lvbigpO1xuICAgIH1cbiAgfVxufVxuIl19