import { inject, Injectable } from '@angular/core';
import { ɵInternalMatomoTracker as InternalMatomoTracker } from 'ngx-matomo-client/core';
import { coerceElement } from './utils/coercion';
import * as i0 from "@angular/core";
export class MatomoFormAnalytics {
    constructor() {
        this.delegate = inject(InternalMatomoTracker);
    }
    disableFormAnalytics() {
        this.delegate.push(['FormAnalytics::disableFormAnalytics']);
    }
    enableFormAnalytics() {
        this.delegate.push(['FormAnalytics::enableFormAnalytics']);
    }
    enableDebugMode() {
        this.delegate.push(['FormAnalytics::enableDebugMode']);
    }
    setTrackingTimer(delayInMilliSeconds) {
        this.delegate.push(['FormAnalytics::setTrackingTimer', delayInMilliSeconds]);
    }
    scanForForms(root) {
        this.delegate.push(['FormAnalytics::scanForForms', coerceElement(root)]);
    }
    trackForm(formElement) {
        this.delegate.push(['FormAnalytics::trackForm', coerceElement(formElement)]);
    }
    trackFormSubmit(formElement) {
        this.delegate.push(['FormAnalytics::trackFormSubmit', coerceElement(formElement)]);
    }
    trackFormConversion(formElementOrName, formId) {
        this.delegate.push([
            'FormAnalytics::trackFormConversion',
            typeof formElementOrName === 'string' ? formElementOrName : coerceElement(formElementOrName),
            formId,
        ]);
    }
    isFormAnalyticsEnabled() {
        return this.delegate.get('FormAnalytics::isFormAnalyticsEnabled');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoFormAnalytics, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoFormAnalytics, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoFormAnalytics, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0b21vLWZvcm0tYW5hbHl0aWNzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWF0b21vLWNsaWVudC9mb3JtLWFuYWx5dGljcy9tYXRvbW8tZm9ybS1hbmFseXRpY3Muc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRCxPQUFPLEVBQUUsc0JBQXNCLElBQUkscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBYWpELE1BQU0sT0FBTyxtQkFBbUI7SUFIaEM7UUFJbUIsYUFBUSxHQUN2QixNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztLQXlDakM7SUF2Q0Msb0JBQW9CO1FBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMscUNBQXFDLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCxtQkFBbUI7UUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsbUJBQTJCO1FBQzFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsaUNBQWlDLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBMkI7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyw2QkFBNkIsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCxTQUFTLENBQUMsV0FBaUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQywwQkFBMEIsRUFBRSxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCxlQUFlLENBQUMsV0FBaUM7UUFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxnQ0FBZ0MsRUFBRSxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxpQkFBZ0QsRUFBRSxNQUFlO1FBQ25GLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ2pCLG9DQUFvQztZQUNwQyxPQUFPLGlCQUFpQixLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztZQUM1RixNQUFNO1NBQ1AsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELHNCQUFzQjtRQUNwQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs4R0ExQ1UsbUJBQW1CO2tIQUFuQixtQkFBbUIsY0FGbEIsTUFBTTs7MkZBRVAsbUJBQW1CO2tCQUgvQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIGluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgybVJbnRlcm5hbE1hdG9tb1RyYWNrZXIgYXMgSW50ZXJuYWxNYXRvbW9UcmFja2VyIH0gZnJvbSAnbmd4LW1hdG9tby1jbGllbnQvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VFbGVtZW50IH0gZnJvbSAnLi91dGlscy9jb2VyY2lvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWF0b21vRm9ybUFuYWx5dGljc0luc3RhbmNlIHtcbiAgaXNGb3JtQW5hbHl0aWNzRW5hYmxlZCgpOiBib29sZWFuO1xuXG4gIGRpc2FibGVGb3JtQW5hbHl0aWNzKCk6IHZvaWQ7XG5cbiAgc2V0VHJhY2tpbmdUaW1lcihkZWxheUluTWlsbGlTZWNvbmRzOiBudW1iZXIpOiB2b2lkO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTWF0b21vRm9ybUFuYWx5dGljcyB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZGVsZWdhdGU6IEludGVybmFsTWF0b21vVHJhY2tlcjxNYXRvbW9Gb3JtQW5hbHl0aWNzSW5zdGFuY2UsICdGb3JtQW5hbHl0aWNzOjonPiA9XG4gICAgaW5qZWN0KEludGVybmFsTWF0b21vVHJhY2tlcik7XG5cbiAgZGlzYWJsZUZvcm1BbmFseXRpY3MoKTogdm9pZCB7XG4gICAgdGhpcy5kZWxlZ2F0ZS5wdXNoKFsnRm9ybUFuYWx5dGljczo6ZGlzYWJsZUZvcm1BbmFseXRpY3MnXSk7XG4gIH1cblxuICBlbmFibGVGb3JtQW5hbHl0aWNzKCk6IHZvaWQge1xuICAgIHRoaXMuZGVsZWdhdGUucHVzaChbJ0Zvcm1BbmFseXRpY3M6OmVuYWJsZUZvcm1BbmFseXRpY3MnXSk7XG4gIH1cblxuICBlbmFibGVEZWJ1Z01vZGUoKTogdm9pZCB7XG4gICAgdGhpcy5kZWxlZ2F0ZS5wdXNoKFsnRm9ybUFuYWx5dGljczo6ZW5hYmxlRGVidWdNb2RlJ10pO1xuICB9XG5cbiAgc2V0VHJhY2tpbmdUaW1lcihkZWxheUluTWlsbGlTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmRlbGVnYXRlLnB1c2goWydGb3JtQW5hbHl0aWNzOjpzZXRUcmFja2luZ1RpbWVyJywgZGVsYXlJbk1pbGxpU2Vjb25kc10pO1xuICB9XG5cbiAgc2NhbkZvckZvcm1zKHJvb3Q/OiBFbGVtZW50IHwgRWxlbWVudFJlZik6IHZvaWQge1xuICAgIHRoaXMuZGVsZWdhdGUucHVzaChbJ0Zvcm1BbmFseXRpY3M6OnNjYW5Gb3JGb3JtcycsIGNvZXJjZUVsZW1lbnQocm9vdCldKTtcbiAgfVxuXG4gIHRyYWNrRm9ybShmb3JtRWxlbWVudDogRWxlbWVudCB8IEVsZW1lbnRSZWYpOiB2b2lkIHtcbiAgICB0aGlzLmRlbGVnYXRlLnB1c2goWydGb3JtQW5hbHl0aWNzOjp0cmFja0Zvcm0nLCBjb2VyY2VFbGVtZW50KGZvcm1FbGVtZW50KV0pO1xuICB9XG5cbiAgdHJhY2tGb3JtU3VibWl0KGZvcm1FbGVtZW50OiBFbGVtZW50IHwgRWxlbWVudFJlZikge1xuICAgIHRoaXMuZGVsZWdhdGUucHVzaChbJ0Zvcm1BbmFseXRpY3M6OnRyYWNrRm9ybVN1Ym1pdCcsIGNvZXJjZUVsZW1lbnQoZm9ybUVsZW1lbnQpXSk7XG4gIH1cblxuICB0cmFja0Zvcm1Db252ZXJzaW9uKGZvcm1FbGVtZW50T3JOYW1lOiBFbGVtZW50IHwgRWxlbWVudFJlZiB8IHN0cmluZywgZm9ybUlkPzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5kZWxlZ2F0ZS5wdXNoKFtcbiAgICAgICdGb3JtQW5hbHl0aWNzOjp0cmFja0Zvcm1Db252ZXJzaW9uJyxcbiAgICAgIHR5cGVvZiBmb3JtRWxlbWVudE9yTmFtZSA9PT0gJ3N0cmluZycgPyBmb3JtRWxlbWVudE9yTmFtZSA6IGNvZXJjZUVsZW1lbnQoZm9ybUVsZW1lbnRPck5hbWUpLFxuICAgICAgZm9ybUlkLFxuICAgIF0pO1xuICB9XG5cbiAgaXNGb3JtQW5hbHl0aWNzRW5hYmxlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZS5nZXQoJ0Zvcm1BbmFseXRpY3M6OmlzRm9ybUFuYWx5dGljc0VuYWJsZWQnKTtcbiAgfVxufVxuIl19