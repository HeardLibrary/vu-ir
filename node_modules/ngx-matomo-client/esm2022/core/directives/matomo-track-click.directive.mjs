import { Directive, HostListener, Input } from '@angular/core';
import { requireNonNull } from '../utils/coercion';
import * as i0 from "@angular/core";
import * as i1 from "../tracker/matomo-tracker.service";
export class MatomoTrackClickDirective {
    constructor(tracker) {
        this.tracker = tracker;
    }
    onClick() {
        this.tracker.trackEvent(requireNonNull(this.matomoClickCategory, 'matomo category is required'), requireNonNull(this.matomoClickAction, 'matomo action is required'), this.matomoClickName, this.matomoClickValue);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoTrackClickDirective, deps: [{ token: i1.MatomoTracker }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.2", type: MatomoTrackClickDirective, isStandalone: true, selector: "[matomoClickCategory][matomoClickAction]", inputs: { matomoClickCategory: "matomoClickCategory", matomoClickAction: "matomoClickAction", matomoClickName: "matomoClickName", matomoClickValue: "matomoClickValue" }, host: { listeners: { "click": "onClick()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoTrackClickDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[matomoClickCategory][matomoClickAction]',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i1.MatomoTracker }], propDecorators: { matomoClickCategory: [{
                type: Input
            }], matomoClickAction: [{
                type: Input
            }], matomoClickName: [{
                type: Input
            }], matomoClickValue: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0b21vLXRyYWNrLWNsaWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1tYXRvbW8tY2xpZW50L2NvcmUvZGlyZWN0aXZlcy9tYXRvbW8tdHJhY2stY2xpY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7OztBQU1uRCxNQUFNLE9BQU8seUJBQXlCO0lBTXBDLFlBQTZCLE9BQXNCO1FBQXRCLFlBQU8sR0FBUCxPQUFPLENBQWU7SUFBRyxDQUFDO0lBR3ZELE9BQU87UUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FDckIsY0FBYyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSw2QkFBNkIsQ0FBQyxFQUN2RSxjQUFjLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLDJCQUEyQixDQUFDLEVBQ25FLElBQUksQ0FBQyxlQUFlLEVBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsQ0FDdEIsQ0FBQztJQUNKLENBQUM7OEdBaEJVLHlCQUF5QjtrR0FBekIseUJBQXlCOzsyRkFBekIseUJBQXlCO2tCQUpyQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwwQ0FBMEM7b0JBQ3BELFVBQVUsRUFBRSxJQUFJO2lCQUNqQjtrRkFFVSxtQkFBbUI7c0JBQTNCLEtBQUs7Z0JBQ0csaUJBQWlCO3NCQUF6QixLQUFLO2dCQUNHLGVBQWU7c0JBQXZCLEtBQUs7Z0JBQ0csZ0JBQWdCO3NCQUF4QixLQUFLO2dCQUtOLE9BQU87c0JBRE4sWUFBWTt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRvbW9UcmFja2VyIH0gZnJvbSAnLi4vdHJhY2tlci9tYXRvbW8tdHJhY2tlci5zZXJ2aWNlJztcbmltcG9ydCB7IHJlcXVpcmVOb25OdWxsIH0gZnJvbSAnLi4vdXRpbHMvY29lcmNpb24nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWF0b21vQ2xpY2tDYXRlZ29yeV1bbWF0b21vQ2xpY2tBY3Rpb25dJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgTWF0b21vVHJhY2tDbGlja0RpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpIG1hdG9tb0NsaWNrQ2F0ZWdvcnk/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIG1hdG9tb0NsaWNrQWN0aW9uPzogc3RyaW5nO1xuICBASW5wdXQoKSBtYXRvbW9DbGlja05hbWU/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIG1hdG9tb0NsaWNrVmFsdWU/OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB0cmFja2VyOiBNYXRvbW9UcmFja2VyKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgb25DbGljaygpOiB2b2lkIHtcbiAgICB0aGlzLnRyYWNrZXIudHJhY2tFdmVudChcbiAgICAgIHJlcXVpcmVOb25OdWxsKHRoaXMubWF0b21vQ2xpY2tDYXRlZ29yeSwgJ21hdG9tbyBjYXRlZ29yeSBpcyByZXF1aXJlZCcpLFxuICAgICAgcmVxdWlyZU5vbk51bGwodGhpcy5tYXRvbW9DbGlja0FjdGlvbiwgJ21hdG9tbyBhY3Rpb24gaXMgcmVxdWlyZWQnKSxcbiAgICAgIHRoaXMubWF0b21vQ2xpY2tOYW1lLFxuICAgICAgdGhpcy5tYXRvbW9DbGlja1ZhbHVlLFxuICAgICk7XG4gIH1cbn1cbiJdfQ==