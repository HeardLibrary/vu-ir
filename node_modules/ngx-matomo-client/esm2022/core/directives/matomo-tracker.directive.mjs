import { Directive, Input } from '@angular/core';
import { fromEvent, merge } from 'rxjs';
import { requireNonNull } from '../utils/coercion';
import * as i0 from "@angular/core";
import * as i1 from "../tracker/matomo-tracker.service";
function coerceEventNames(input) {
    if (input && input.length > 0) {
        return Array.isArray(input) ? input : [input];
    }
    else {
        return undefined;
    }
}
export class MatomoTrackerDirective {
    constructor(tracker, elementRef) {
        this.tracker = tracker;
        this.elementRef = elementRef;
    }
    /** Track a Matomo event whenever specified DOM event is triggered */
    set matomoTracker(input) {
        const eventNames = coerceEventNames(input);
        this.sub?.unsubscribe();
        if (eventNames) {
            const handlers = eventNames.map(eventName => fromEvent(this.elementRef.nativeElement, eventName));
            this.sub = merge(...handlers).subscribe(() => this.trackEvent());
        }
        else {
            this.sub = undefined;
        }
    }
    ngOnDestroy() {
        this.sub?.unsubscribe();
    }
    trackEvent(arg1, arg2) {
        let category = this.matomoCategory;
        let action = this.matomoAction;
        let name = this.matomoName;
        let value = this.matomoValue;
        if (typeof arg1 === 'object') {
            category = arg1.category ?? category;
            action = arg1.action ?? action;
            name = arg1.name ?? name;
            value = arg1.value ?? value;
        }
        else if (typeof arg1 === 'string') {
            name = arg1;
            if (typeof arg2 === 'number') {
                value = arg2;
            }
        }
        else if (typeof arg1 === 'number') {
            value = arg1;
        }
        this.tracker.trackEvent(requireNonNull(category, 'matomo category is required'), requireNonNull(action, 'matomo action is required'), name, value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoTrackerDirective, deps: [{ token: i1.MatomoTracker }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.2", type: MatomoTrackerDirective, isStandalone: true, selector: "[matomoTracker]", inputs: { matomoCategory: "matomoCategory", matomoAction: "matomoAction", matomoName: "matomoName", matomoValue: "matomoValue", matomoTracker: "matomoTracker" }, exportAs: ["matomo"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoTrackerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[matomoTracker]',
                    exportAs: 'matomo',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i1.MatomoTracker }, { type: i0.ElementRef }], propDecorators: { matomoCategory: [{
                type: Input
            }], matomoAction: [{
                type: Input
            }], matomoName: [{
                type: Input
            }], matomoValue: [{
                type: Input
            }], matomoTracker: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0b21vLXRyYWNrZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hdG9tby1jbGllbnQvY29yZS9kaXJlY3RpdmVzL21hdG9tby10cmFja2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFFdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7QUFZbkQsU0FBUyxnQkFBZ0IsQ0FBQyxLQUFvQjtJQUM1QyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUM3QixPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMvQztTQUFNO1FBQ0wsT0FBTyxTQUFTLENBQUM7S0FDbEI7QUFDSCxDQUFDO0FBT0QsTUFBTSxPQUFPLHNCQUFzQjtJQVlqQyxZQUNtQixPQUFzQixFQUN0QixVQUFzQjtRQUR0QixZQUFPLEdBQVAsT0FBTyxDQUFlO1FBQ3RCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFDdEMsQ0FBQztJQUVKLHFFQUFxRTtJQUNyRSxJQUNJLGFBQWEsQ0FBQyxLQUFvQjtRQUNwQyxNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxDQUFDO1FBRXhCLElBQUksVUFBVSxFQUFFO1lBQ2QsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUMxQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQ3BELENBQUM7WUFFRixJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUNsRTthQUFNO1lBQ0wsSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQWtCRCxVQUFVLENBQUMsSUFBa0MsRUFBRSxJQUFhO1FBQzFELElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDbkMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMvQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzNCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFFN0IsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDNUIsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDO1lBQ3JDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQztZQUMvQixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7WUFDekIsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDO1NBQzdCO2FBQU0sSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDbkMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUVaLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO2dCQUM1QixLQUFLLEdBQUcsSUFBSSxDQUFDO2FBQ2Q7U0FDRjthQUFNLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ25DLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDZDtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUNyQixjQUFjLENBQUMsUUFBUSxFQUFFLDZCQUE2QixDQUFDLEVBQ3ZELGNBQWMsQ0FBQyxNQUFNLEVBQUUsMkJBQTJCLENBQUMsRUFDbkQsSUFBSSxFQUNKLEtBQUssQ0FDTixDQUFDO0lBQ0osQ0FBQzs4R0FsRlUsc0JBQXNCO2tHQUF0QixzQkFBc0I7OzJGQUF0QixzQkFBc0I7a0JBTGxDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsUUFBUSxFQUFFLFFBQVE7b0JBQ2xCLFVBQVUsRUFBRSxJQUFJO2lCQUNqQjsyR0FLVSxjQUFjO3NCQUF0QixLQUFLO2dCQUVHLFlBQVk7c0JBQXBCLEtBQUs7Z0JBRUcsVUFBVTtzQkFBbEIsS0FBSztnQkFFRyxXQUFXO3NCQUFuQixLQUFLO2dCQVNGLGFBQWE7c0JBRGhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZyb21FdmVudCwgbWVyZ2UsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTWF0b21vVHJhY2tlciB9IGZyb20gJy4uL3RyYWNrZXIvbWF0b21vLXRyYWNrZXIuc2VydmljZSc7XG5pbXBvcnQgeyByZXF1aXJlTm9uTnVsbCB9IGZyb20gJy4uL3V0aWxzL2NvZXJjaW9uJztcblxuZXhwb3J0IGludGVyZmFjZSBUcmFja0FyZ3Mge1xuICBjYXRlZ29yeT86IHN0cmluZztcbiAgYWN0aW9uPzogc3RyaW5nO1xuICBuYW1lPzogc3RyaW5nO1xuICB2YWx1ZT86IG51bWJlcjtcbn1cblxudHlwZSBFdmVudE5hbWUgPSBrZXlvZiBHbG9iYWxFdmVudEhhbmRsZXJzRXZlbnRNYXAgfCBzdHJpbmc7XG50eXBlIERPTUV2ZW50SW5wdXQgPSBFdmVudE5hbWUgfCBFdmVudE5hbWVbXSB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGNvZXJjZUV2ZW50TmFtZXMoaW5wdXQ6IERPTUV2ZW50SW5wdXQpOiBFdmVudE5hbWVbXSB8IG51bGwgfCB1bmRlZmluZWQge1xuICBpZiAoaW5wdXQgJiYgaW5wdXQubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGlucHV0KSA/IGlucHV0IDogW2lucHV0XTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttYXRvbW9UcmFja2VyXScsXG4gIGV4cG9ydEFzOiAnbWF0b21vJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgTWF0b21vVHJhY2tlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3ViPzogU3Vic2NyaXB0aW9uO1xuXG4gIC8qKiBTZXQgdGhlIGV2ZW50IGNhdGVnb3J5ICovXG4gIEBJbnB1dCgpIG1hdG9tb0NhdGVnb3J5Pzogc3RyaW5nO1xuICAvKiogU2V0IHRoZSBldmVudCBhY3Rpb24gKi9cbiAgQElucHV0KCkgbWF0b21vQWN0aW9uPzogc3RyaW5nO1xuICAvKiogU2V0IHRoZSBldmVudCBuYW1lICovXG4gIEBJbnB1dCgpIG1hdG9tb05hbWU/OiBzdHJpbmc7XG4gIC8qKiBTZXQgdGhlIGV2ZW50IHZhbHVlICovXG4gIEBJbnB1dCgpIG1hdG9tb1ZhbHVlPzogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgdHJhY2tlcjogTWF0b21vVHJhY2tlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICkge31cblxuICAvKiogVHJhY2sgYSBNYXRvbW8gZXZlbnQgd2hlbmV2ZXIgc3BlY2lmaWVkIERPTSBldmVudCBpcyB0cmlnZ2VyZWQgKi9cbiAgQElucHV0KClcbiAgc2V0IG1hdG9tb1RyYWNrZXIoaW5wdXQ6IERPTUV2ZW50SW5wdXQpIHtcbiAgICBjb25zdCBldmVudE5hbWVzID0gY29lcmNlRXZlbnROYW1lcyhpbnB1dCk7XG5cbiAgICB0aGlzLnN1Yj8udW5zdWJzY3JpYmUoKTtcblxuICAgIGlmIChldmVudE5hbWVzKSB7XG4gICAgICBjb25zdCBoYW5kbGVycyA9IGV2ZW50TmFtZXMubWFwKGV2ZW50TmFtZSA9PlxuICAgICAgICBmcm9tRXZlbnQodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGV2ZW50TmFtZSksXG4gICAgICApO1xuXG4gICAgICB0aGlzLnN1YiA9IG1lcmdlKC4uLmhhbmRsZXJzKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy50cmFja0V2ZW50KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN1YiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1Yj8udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIC8qKiBUcmFjayBhbiBldmVudCB1c2luZyBjYXRlZ29yeSwgYWN0aW9uLCBuYW1lIGFuZCB2YWx1ZSBzZXQgYXMgQElucHV0KCkgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmlmaWVkLXNpZ25hdHVyZXNcbiAgdHJhY2tFdmVudCgpOiB2b2lkO1xuXG4gIC8qKiBUcmFjayBhbiBldmVudCB1c2luZyBjYXRlZ29yeSwgYWN0aW9uIGFuZCBuYW1lIHNldCBhcyBASW5wdXQoKSBhbmQgcHJvdmlkZWQgdmFsdWUgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmlmaWVkLXNpZ25hdHVyZXNcbiAgdHJhY2tFdmVudCh2YWx1ZTogbnVtYmVyKTogdm9pZDtcblxuICAvKiogVHJhY2sgYW4gZXZlbnQgdXNpbmcgY2F0ZWdvcnkgYW5kIGFjdGlvbiBzZXQgYXMgQElucHV0KCkgYW5kIHByb3ZpZGVkIG5hbWUgYW5kIHZhbHVlICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5pZmllZC1zaWduYXR1cmVzXG4gIHRyYWNrRXZlbnQobmFtZTogc3RyaW5nLCB2YWx1ZT86IG51bWJlcik6IHZvaWQ7XG5cbiAgLyoqIFRyYWNrIGFuIGV2ZW50IHVzaW5nIHByb3ZpZGVkIGNhdGVnb3J5LCBhY3Rpb24sIG5hbWUgYW5kIHZhbHVlIChhbnkgQElucHV0KCkgaXMgdXNlZCBhcyBhIGRlZmF1bHQgdmFsdWUpICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5pZmllZC1zaWduYXR1cmVzXG4gIHRyYWNrRXZlbnQoYXJnczogVHJhY2tBcmdzKTogdm9pZDtcblxuICB0cmFja0V2ZW50KGFyZzE/OiBUcmFja0FyZ3MgfCBzdHJpbmcgfCBudW1iZXIsIGFyZzI/OiBudW1iZXIpOiB2b2lkIHtcbiAgICBsZXQgY2F0ZWdvcnkgPSB0aGlzLm1hdG9tb0NhdGVnb3J5O1xuICAgIGxldCBhY3Rpb24gPSB0aGlzLm1hdG9tb0FjdGlvbjtcbiAgICBsZXQgbmFtZSA9IHRoaXMubWF0b21vTmFtZTtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLm1hdG9tb1ZhbHVlO1xuXG4gICAgaWYgKHR5cGVvZiBhcmcxID09PSAnb2JqZWN0Jykge1xuICAgICAgY2F0ZWdvcnkgPSBhcmcxLmNhdGVnb3J5ID8/IGNhdGVnb3J5O1xuICAgICAgYWN0aW9uID0gYXJnMS5hY3Rpb24gPz8gYWN0aW9uO1xuICAgICAgbmFtZSA9IGFyZzEubmFtZSA/PyBuYW1lO1xuICAgICAgdmFsdWUgPSBhcmcxLnZhbHVlID8/IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gYXJnMTtcblxuICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YWx1ZSA9IGFyZzI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHZhbHVlID0gYXJnMTtcbiAgICB9XG5cbiAgICB0aGlzLnRyYWNrZXIudHJhY2tFdmVudChcbiAgICAgIHJlcXVpcmVOb25OdWxsKGNhdGVnb3J5LCAnbWF0b21vIGNhdGVnb3J5IGlzIHJlcXVpcmVkJyksXG4gICAgICByZXF1aXJlTm9uTnVsbChhY3Rpb24sICdtYXRvbW8gYWN0aW9uIGlzIHJlcXVpcmVkJyksXG4gICAgICBuYW1lLFxuICAgICAgdmFsdWUsXG4gICAgKTtcbiAgfVxufVxuIl19