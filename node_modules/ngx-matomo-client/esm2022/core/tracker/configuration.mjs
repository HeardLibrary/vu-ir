import { inject, InjectionToken } from '@angular/core';
import { requireNonNull } from '../utils/coercion';
const CONFIG_NOT_FOUND = 'No Matomo configuration found! Have you included Matomo module using MatomoModule.forRoot() or provideMatomo()?';
/** Internal marker token to detect that router has been enabled */
export const MATOMO_ROUTER_ENABLED = new InjectionToken('MATOMO_ROUTER_ENABLED', {
    factory() {
        return false;
    },
});
/** Injection token for {@link MatomoConfiguration} */
export const MATOMO_CONFIGURATION = new InjectionToken('MATOMO_CONFIGURATION');
/**
 * For internal use only. Injection token for {@link InternalMatomoConfiguration}
 *
 */
export const INTERNAL_MATOMO_CONFIGURATION = new InjectionToken('INTERNAL_MATOMO_CONFIGURATION', {
    factory() {
        const { mode, requireConsent, ...restConfig } = requireNonNull(inject(MATOMO_CONFIGURATION, { optional: true }), CONFIG_NOT_FOUND);
        return {
            mode: mode ? coerceInitializationMode(mode) : undefined,
            disabled: false,
            enableLinkTracking: true,
            trackAppInitialLoad: !inject(MATOMO_ROUTER_ENABLED),
            requireConsent: requireConsent ? coerceConsentRequirement(requireConsent) : 'none',
            enableJSErrorTracking: false,
            runOutsideAngularZone: false,
            disableCampaignParameters: false,
            acceptDoNotTrack: false,
            ...restConfig,
        };
    },
});
/**
 * For internal use only. Injection token for deferred {@link InternalMatomoConfiguration}.
 *
 */
export const DEFERRED_INTERNAL_MATOMO_CONFIGURATION = new InjectionToken('DEFERRED_INTERNAL_MATOMO_CONFIGURATION', {
    factory: () => {
        const base = inject(INTERNAL_MATOMO_CONFIGURATION);
        let resolveFn;
        const configuration = new Promise(resolve => (resolveFn = resolve));
        return {
            configuration,
            markReady(configuration) {
                requireNonNull(resolveFn, 'resolveFn')({
                    ...base,
                    ...configuration,
                });
            },
        };
    },
});
/**
 * For internal use only. Injection token for fully loaded async {@link InternalMatomoConfiguration}.
 *
 */
export const ASYNC_INTERNAL_MATOMO_CONFIGURATION = new InjectionToken('ASYNC_INTERNAL_MATOMO_CONFIGURATION', {
    factory: () => inject(DEFERRED_INTERNAL_MATOMO_CONFIGURATION).configuration,
});
/** @deprecated Use {@link MatomoInitializationBehavior} instead */
export var MatomoInitializationMode;
(function (MatomoInitializationMode) {
    /**
     * Automatically inject matomo script using provided configuration
     *
     * @deprecated Use `'auto'` instead
     */
    MatomoInitializationMode[MatomoInitializationMode["AUTO"] = 0] = "AUTO";
    /**
     * Do not inject Matomo script. In this case, initialization script must be provided
     *
     * @deprecated Use `'manual'` instead
     */
    MatomoInitializationMode[MatomoInitializationMode["MANUAL"] = 1] = "MANUAL";
    /**
     * Automatically inject matomo script when deferred tracker configuration is provided using `MatomoInitializerService.initializeTracker()`.
     *
     * @deprecated Use `'deferred'` instead
     */
    MatomoInitializationMode[MatomoInitializationMode["AUTO_DEFERRED"] = 2] = "AUTO_DEFERRED";
})(MatomoInitializationMode || (MatomoInitializationMode = {}));
export function coerceInitializationMode(value) {
    switch (value) {
        case MatomoInitializationMode.AUTO:
            return 'auto';
        case MatomoInitializationMode.MANUAL:
            return 'manual';
        case MatomoInitializationMode.AUTO_DEFERRED:
            return 'deferred';
        default:
            return value;
    }
}
/** @deprecated Use {@link MatomoConsentRequirement} instead */
export var MatomoConsentMode;
(function (MatomoConsentMode) {
    /** Do not require any consent, always track users */
    MatomoConsentMode[MatomoConsentMode["NONE"] = 0] = "NONE";
    /** Require cookie consent */
    MatomoConsentMode[MatomoConsentMode["COOKIE"] = 1] = "COOKIE";
    /** Require tracking consent */
    MatomoConsentMode[MatomoConsentMode["TRACKING"] = 2] = "TRACKING";
})(MatomoConsentMode || (MatomoConsentMode = {}));
export function coerceConsentRequirement(value) {
    switch (value) {
        case MatomoConsentMode.NONE:
            return 'none';
        case MatomoConsentMode.COOKIE:
            return 'cookie';
        case MatomoConsentMode.TRACKING:
            return 'tracking';
        default:
            return value;
    }
}
export function isAutoConfigurationMode(config) {
    return (config.mode == null || config.mode === 'auto' || config.mode === MatomoInitializationMode.AUTO);
}
function hasMainTrackerConfiguration(config) {
    // If one is undefined, both should be
    return config.siteId != null && config.trackerUrl != null;
}
export function isEmbeddedTrackerConfiguration(config) {
    return config.scriptUrl != null && !hasMainTrackerConfiguration(config);
}
export function isExplicitTrackerConfiguration(config) {
    return hasMainTrackerConfiguration(config) || isMultiTrackerConfiguration(config);
}
export function isMultiTrackerConfiguration(config) {
    return Array.isArray(config.trackers);
}
export function getTrackersConfiguration(config) {
    return isMultiTrackerConfiguration(config)
        ? config.trackers
        : [
            {
                trackerUrl: config.trackerUrl,
                siteId: config.siteId,
                trackerUrlSuffix: config.trackerUrlSuffix,
            },
        ];
}
//# sourceMappingURL=data:application/json;base64,