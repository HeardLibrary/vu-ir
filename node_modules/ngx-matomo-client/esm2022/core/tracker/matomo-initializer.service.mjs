import { isPlatformBrowser } from '@angular/common';
import { inject, Injectable, PLATFORM_ID } from '@angular/core';
import { initializeMatomoHolder } from '../holder';
import { runOnce } from '../utils/function';
import { ScriptInjector } from '../utils/script-injector';
import { appendTrailingSlash } from '../utils/url';
import { DEFERRED_INTERNAL_MATOMO_CONFIGURATION, getTrackersConfiguration, INTERNAL_MATOMO_CONFIGURATION, isAutoConfigurationMode, isEmbeddedTrackerConfiguration, isExplicitTrackerConfiguration, } from './configuration';
import { ALREADY_INITIALIZED_ERROR, ALREADY_INJECTED_ERROR } from './errors';
import { MatomoTracker } from './matomo-tracker.service';
import * as i0 from "@angular/core";
function coerceSiteId(siteId) {
    return `${siteId}`;
}
function buildTrackerUrl(url, suffix) {
    if (suffix == null) {
        return appendTrailingSlash(url) + DEFAULT_TRACKER_SUFFIX;
    }
    return url + suffix;
}
const DEFAULT_TRACKER_SUFFIX = 'matomo.php';
const DEFAULT_SCRIPT_SUFFIX = 'matomo.js';
export function createMatomoInitializer() {
    const disabled = inject(INTERNAL_MATOMO_CONFIGURATION).disabled;
    const isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
    return disabled || !isBrowser ? new NoopMatomoInitializer() : new MatomoInitializerService();
}
export class NoopMatomoInitializer {
    initialize() {
        // No-op
    }
    init() {
        // No-op
    }
    initializeTracker(_) {
        // No-op
    }
}
export class MatomoInitializerService {
    constructor() {
        this.config = inject(INTERNAL_MATOMO_CONFIGURATION);
        this.deferredConfig = inject(DEFERRED_INTERNAL_MATOMO_CONFIGURATION);
        this.tracker = inject(MatomoTracker);
        this.scriptInjector = inject(ScriptInjector);
        this.initialize = runOnce(() => {
            this.runPreInitTasks();
            if (isAutoConfigurationMode(this.config)) {
                this.injectMatomoScript(this.config);
            }
        }, ALREADY_INITIALIZED_ERROR);
        this.injectMatomoScript = runOnce((config) => {
            if (isExplicitTrackerConfiguration(config)) {
                const { scriptUrl: customScriptUrl } = config;
                const [mainTracker, ...additionalTrackers] = getTrackersConfiguration(config);
                const scriptUrl = customScriptUrl ?? appendTrailingSlash(mainTracker.trackerUrl) + DEFAULT_SCRIPT_SUFFIX;
                this.registerMainTracker(mainTracker);
                this.registerAdditionalTrackers(additionalTrackers);
                this.scriptInjector.injectDOMScript(scriptUrl);
            }
            else if (isEmbeddedTrackerConfiguration(config)) {
                const { scriptUrl, trackers: additionalTrackers } = {
                    trackers: [],
                    ...config,
                };
                this.registerAdditionalTrackers(additionalTrackers);
                this.scriptInjector.injectDOMScript(scriptUrl);
            }
            this.deferredConfig.markReady(config);
        }, ALREADY_INJECTED_ERROR);
        initializeMatomoHolder();
    }
    // TODO v7 remove
    /** @deprecated Will be removed in v7+. Use {@link initialize initialize()} instead. */
    init() {
        this.initialize();
    }
    initializeTracker(config) {
        this.injectMatomoScript(config);
    }
    registerMainTracker(mainTracker) {
        const mainTrackerUrl = buildTrackerUrl(mainTracker.trackerUrl, mainTracker.trackerUrlSuffix);
        const mainTrackerSiteId = coerceSiteId(mainTracker.siteId);
        this.tracker.setTrackerUrl(mainTrackerUrl);
        this.tracker.setSiteId(mainTrackerSiteId);
    }
    registerAdditionalTrackers(additionalTrackers) {
        additionalTrackers.forEach(({ trackerUrl, siteId, trackerUrlSuffix }) => {
            const additionalTrackerUrl = buildTrackerUrl(trackerUrl, trackerUrlSuffix);
            const additionalTrackerSiteId = coerceSiteId(siteId);
            this.tracker.addTracker(additionalTrackerUrl, additionalTrackerSiteId);
        });
    }
    runPreInitTasks() {
        if (this.config.acceptDoNotTrack) {
            this.tracker.setDoNotTrack(true);
        }
        if (this.config.requireConsent === 'cookie') {
            this.tracker.requireCookieConsent();
        }
        else if (this.config.requireConsent === 'tracking') {
            this.tracker.requireConsent();
        }
        if (this.config.enableJSErrorTracking) {
            this.tracker.enableJSErrorTracking();
        }
        if (this.config.disableCampaignParameters) {
            this.tracker.disableCampaignParameters();
        }
        if (this.config.trackAppInitialLoad) {
            this.tracker.trackPageView();
        }
        if (this.config.enableLinkTracking) {
            this.tracker.enableLinkTracking(this.config.enableLinkTracking === 'enable-pseudo');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoInitializerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoInitializerService, providedIn: 'root', useFactory: createMatomoInitializer }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoInitializerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: createMatomoInitializer,
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,