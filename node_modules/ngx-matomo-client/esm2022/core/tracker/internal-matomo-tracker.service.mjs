import { isPlatformBrowser } from '@angular/common';
import { inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';
import { initializeMatomoHolder } from '../holder';
import { INTERNAL_MATOMO_CONFIGURATION } from './configuration';
import * as i0 from "@angular/core";
function trimTrailingUndefinedElements(array) {
    const trimmed = [...array];
    while (trimmed.length > 0 && trimmed[trimmed.length - 1] === undefined) {
        trimmed.pop();
    }
    return trimmed;
}
export function createInternalMatomoTracker() {
    const disabled = inject(INTERNAL_MATOMO_CONFIGURATION).disabled;
    const isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
    return disabled || !isBrowser ? new NoopMatomoTracker() : new InternalMatomoTracker();
}
export class InternalMatomoTracker {
    constructor() {
        this.ngZone = inject(NgZone);
        this.config = inject(INTERNAL_MATOMO_CONFIGURATION);
        initializeMatomoHolder();
    }
    /** Asynchronously call provided method name on matomo tracker instance */
    get(getter) {
        return this.pushFn(matomo => matomo[getter]());
    }
    pushFn(fn) {
        return new Promise(resolve => {
            this.push([
                function () {
                    resolve(fn(this));
                },
            ]);
        });
    }
    push(args) {
        if (this.config.runOutsideAngularZone) {
            this.ngZone.runOutsideAngular(() => {
                window._paq.push(trimTrailingUndefinedElements(args));
            });
        }
        else {
            window._paq.push(trimTrailingUndefinedElements(args));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: InternalMatomoTracker, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: InternalMatomoTracker, providedIn: 'root', useFactory: createInternalMatomoTracker }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: InternalMatomoTracker, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: createInternalMatomoTracker,
                }]
        }], ctorParameters: () => [] });
export class NoopMatomoTracker {
    /** Asynchronously call provided method name on matomo tracker instance */
    async get(_) {
        return Promise.reject('MatomoTracker is disabled');
    }
    push(_) {
        // No-op
    }
    async pushFn(_) {
        return Promise.reject('MatomoTracker is disabled');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWwtbWF0b21vLXRyYWNrZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1tYXRvbW8tY2xpZW50L2NvcmUvdHJhY2tlci9pbnRlcm5hbC1tYXRvbW8tdHJhY2tlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLHNCQUFzQixFQUFnQixNQUFNLFdBQVcsQ0FBQztBQUVqRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFNaEUsU0FBUyw2QkFBNkIsQ0FBSSxLQUFVO0lBQ2xELE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUUzQixPQUFPLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtRQUN0RSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDZjtJQUVELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFPRCxNQUFNLFVBQVUsMkJBQTJCO0lBQ3pDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUNoRSxNQUFNLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUV6RCxPQUFPLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLHFCQUFxQixFQUFFLENBQUM7QUFDeEYsQ0FBQztBQU1ELE1BQU0sT0FBTyxxQkFBcUI7SUFJaEM7UUFIaUIsV0FBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QixXQUFNLEdBQUcsTUFBTSxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFHOUQsc0JBQXNCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsMEVBQTBFO0lBQzFFLEdBQUcsQ0FDRCxNQUFnRTtRQUVoRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBRSxNQUFNLENBQUMsTUFBNEMsQ0FBUyxFQUFFLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRUQsTUFBTSxDQUFJLEVBQStDO1FBQ3ZELE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDUjtvQkFDRSxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLENBQUM7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFJLENBQUMsSUFBNEI7UUFDL0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixFQUFFO1lBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO2dCQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDdkQ7SUFDSCxDQUFDOzhHQWpDVSxxQkFBcUI7a0hBQXJCLHFCQUFxQixjQUhwQixNQUFNLGNBQ04sMkJBQTJCOzsyRkFFNUIscUJBQXFCO2tCQUpqQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO29CQUNsQixVQUFVLEVBQUUsMkJBQTJCO2lCQUN4Qzs7QUFxQ0QsTUFBTSxPQUFPLGlCQUFpQjtJQUc1QiwwRUFBMEU7SUFDMUUsS0FBSyxDQUFDLEdBQUcsQ0FBK0MsQ0FBSTtRQUMxRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsSUFBSSxDQUFDLENBQVk7UUFDZixRQUFRO0lBQ1YsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNLENBQUksQ0FBOEM7UUFDNUQsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgaW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmUsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpbml0aWFsaXplTWF0b21vSG9sZGVyLCBNYXRvbW9Ib2xkZXIgfSBmcm9tICcuLi9ob2xkZXInO1xuaW1wb3J0IHsgR2V0dGVycywgTm9uRW1wdHlBcnJheSwgUHJlZml4ZWRUeXBlIH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xuaW1wb3J0IHsgSU5URVJOQUxfTUFUT01PX0NPTkZJR1VSQVRJT04gfSBmcm9tICcuL2NvbmZpZ3VyYXRpb24nO1xuXG5kZWNsYXJlIGNvbnN0IHdpbmRvdzogTWF0b21vSG9sZGVyO1xuXG50eXBlIFJldHVyblR5cGU8VD4gPSBUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueSkgPT4gaW5mZXIgUiA/IFIgOiBhbnk7XG5cbmZ1bmN0aW9uIHRyaW1UcmFpbGluZ1VuZGVmaW5lZEVsZW1lbnRzPFQ+KGFycmF5OiBUW10pOiBUW10ge1xuICBjb25zdCB0cmltbWVkID0gWy4uLmFycmF5XTtcblxuICB3aGlsZSAodHJpbW1lZC5sZW5ndGggPiAwICYmIHRyaW1tZWRbdHJpbW1lZC5sZW5ndGggLSAxXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdHJpbW1lZC5wb3AoKTtcbiAgfVxuXG4gIHJldHVybiB0cmltbWVkO1xufVxuXG50eXBlIEludGVybmFsTWF0b21vVHJhY2tlclR5cGUgPSBQaWNrPFxuICBJbnRlcm5hbE1hdG9tb1RyYWNrZXI8dW5rbm93biwgc3RyaW5nPixcbiAgJ2dldCcgfCAncHVzaCcgfCAncHVzaEZuJ1xuPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludGVybmFsTWF0b21vVHJhY2tlcigpOiBJbnRlcm5hbE1hdG9tb1RyYWNrZXJUeXBlIHtcbiAgY29uc3QgZGlzYWJsZWQgPSBpbmplY3QoSU5URVJOQUxfTUFUT01PX0NPTkZJR1VSQVRJT04pLmRpc2FibGVkO1xuICBjb25zdCBpc0Jyb3dzZXIgPSBpc1BsYXRmb3JtQnJvd3NlcihpbmplY3QoUExBVEZPUk1fSUQpKTtcblxuICByZXR1cm4gZGlzYWJsZWQgfHwgIWlzQnJvd3NlciA/IG5ldyBOb29wTWF0b21vVHJhY2tlcigpIDogbmV3IEludGVybmFsTWF0b21vVHJhY2tlcigpO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgdXNlRmFjdG9yeTogY3JlYXRlSW50ZXJuYWxNYXRvbW9UcmFja2VyLFxufSlcbmV4cG9ydCBjbGFzcyBJbnRlcm5hbE1hdG9tb1RyYWNrZXI8TUFUT01PLCBQUkVGSVggZXh0ZW5kcyBzdHJpbmcgPSAnJz4ge1xuICBwcml2YXRlIHJlYWRvbmx5IG5nWm9uZSA9IGluamVjdChOZ1pvbmUpO1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZyA9IGluamVjdChJTlRFUk5BTF9NQVRPTU9fQ09ORklHVVJBVElPTik7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaW5pdGlhbGl6ZU1hdG9tb0hvbGRlcigpO1xuICB9XG5cbiAgLyoqIEFzeW5jaHJvbm91c2x5IGNhbGwgcHJvdmlkZWQgbWV0aG9kIG5hbWUgb24gbWF0b21vIHRyYWNrZXIgaW5zdGFuY2UgKi9cbiAgZ2V0PEsgZXh0ZW5kcyBHZXR0ZXJzPFByZWZpeGVkVHlwZTxNQVRPTU8sIFBSRUZJWD4+PihcbiAgICBnZXR0ZXI6IEsgZXh0ZW5kcyBrZXlvZiBQcmVmaXhlZFR5cGU8TUFUT01PLCBQUkVGSVg+ID8gSyA6IG5ldmVyLFxuICApOiBQcm9taXNlPFJldHVyblR5cGU8UHJlZml4ZWRUeXBlPE1BVE9NTywgUFJFRklYPltLXT4+IHtcbiAgICByZXR1cm4gdGhpcy5wdXNoRm4obWF0b21vID0+IChtYXRvbW9bZ2V0dGVyIGFzIGtleW9mIFByZWZpeGVkVHlwZTxNQVRPTU8sIFBSRUZJWD5dIGFzIGFueSkoKSk7XG4gIH1cblxuICBwdXNoRm48VD4oZm46IChtYXRvbW86IFByZWZpeGVkVHlwZTxNQVRPTU8sIFBSRUZJWD4pID0+IFQpOiBQcm9taXNlPFQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLnB1c2goW1xuICAgICAgICBmdW5jdGlvbiAodGhpczogUHJlZml4ZWRUeXBlPE1BVE9NTywgUFJFRklYPik6IHZvaWQge1xuICAgICAgICAgIHJlc29sdmUoZm4odGhpcykpO1xuICAgICAgICB9LFxuICAgICAgXSk7XG4gICAgfSk7XG4gIH1cblxuICBwdXNoKGFyZ3M6IE5vbkVtcHR5QXJyYXk8dW5rbm93bj4pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb25maWcucnVuT3V0c2lkZUFuZ3VsYXJab25lKSB7XG4gICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5fcGFxLnB1c2godHJpbVRyYWlsaW5nVW5kZWZpbmVkRWxlbWVudHMoYXJncykpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5fcGFxLnB1c2godHJpbVRyYWlsaW5nVW5kZWZpbmVkRWxlbWVudHMoYXJncykpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTm9vcE1hdG9tb1RyYWNrZXI8TUFUT01PID0gdW5rbm93biwgUFJFRklYIGV4dGVuZHMgc3RyaW5nID0gJyc+XG4gIGltcGxlbWVudHMgSW50ZXJuYWxNYXRvbW9UcmFja2VyVHlwZVxue1xuICAvKiogQXN5bmNocm9ub3VzbHkgY2FsbCBwcm92aWRlZCBtZXRob2QgbmFtZSBvbiBtYXRvbW8gdHJhY2tlciBpbnN0YW5jZSAqL1xuICBhc3luYyBnZXQ8SyBleHRlbmRzIGtleW9mIFByZWZpeGVkVHlwZTxNQVRPTU8sIFBSRUZJWD4+KF86IEspOiBQcm9taXNlPG5ldmVyPiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdNYXRvbW9UcmFja2VyIGlzIGRpc2FibGVkJyk7XG4gIH1cblxuICBwdXNoKF86IHVua25vd25bXSk6IHZvaWQge1xuICAgIC8vIE5vLW9wXG4gIH1cblxuICBhc3luYyBwdXNoRm48VD4oXzogKG1hdG9tbzogUHJlZml4ZWRUeXBlPE1BVE9NTywgUFJFRklYPikgPT4gVCk6IFByb21pc2U8VD4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnTWF0b21vVHJhY2tlciBpcyBkaXNhYmxlZCcpO1xuICB9XG59XG4iXX0=