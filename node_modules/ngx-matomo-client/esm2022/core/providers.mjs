import { ENVIRONMENT_INITIALIZER, inject, makeEnvironmentProviders, } from '@angular/core';
import { MATOMO_CONFIGURATION } from './tracker/configuration';
import { MatomoInitializerService } from './tracker/matomo-initializer.service';
import { MATOMO_SCRIPT_FACTORY } from './tracker/script-factory';
const PRIVATE_MATOMO_PROVIDERS = Symbol('MATOMO_PROVIDERS');
const PRIVATE_MATOMO_CHECKS = Symbol('MATOMO_CHECKS');
export function createMatomoFeature(kind, providers, checks) {
    return { kind, [PRIVATE_MATOMO_PROVIDERS]: providers, [PRIVATE_MATOMO_CHECKS]: checks };
}
/**
 * Return Matomo providers (typically added to an application's root module)
 *
 * Additional features may be provided as additional arguments, like this:
 * @example
 * // Simple configuration
 * providers: [ provideMatomo({ siteId: 1, trackerUrl: '...' }) ]
 *
 * // With additional features
 * providers: [
 *     provideMatomo(
 *         { siteId: 1, trackerUrl: '...' },
 *         withScriptFactory(...),
 *     )
 * ]
 *
 * // With advanced config factory function
 * providers: [
 *     provideMatomo(
 *         () => inject(MyService).getMatomoConfig(),
 *         withScriptFactory(...),
 *     )
 * ]
 *
 * @param config Matomo configuration (or configuration factory, which can use `inject`)
 * @param features Optional additional features to enable
 *
 * @see MatomoConfiguration
 * @see withScriptFactory
 * @see withRouter
 * @see withRouterInterceptors
 * @see withRouteData
 */
export function provideMatomo(config, ...features) {
    const providers = [
        {
            provide: ENVIRONMENT_INITIALIZER,
            multi: true,
            useValue() {
                inject(MatomoInitializerService).initialize();
            },
        },
    ];
    const featuresKind = [];
    if (typeof config === 'function') {
        providers.push({
            provide: MATOMO_CONFIGURATION,
            useFactory: config,
        });
    }
    else {
        providers.push({
            provide: MATOMO_CONFIGURATION,
            useValue: config,
        });
    }
    for (const feature of features) {
        providers.push(...feature[PRIVATE_MATOMO_PROVIDERS]);
        featuresKind.push(feature.kind);
    }
    for (const feature of features) {
        feature[PRIVATE_MATOMO_CHECKS]?.(featuresKind);
    }
    return makeEnvironmentProviders(providers);
}
/** Add a custom script factory to use for Matomo's script element */
export function withScriptFactory(scriptFactory) {
    return createMatomoFeature("ScriptFactory" /* CoreMatomoFeatureKind.ScriptFactory */, [
        { provide: MATOMO_SCRIPT_FACTORY, useValue: scriptFactory },
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hdG9tby1jbGllbnQvY29yZS9wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUV2QixNQUFNLEVBQ04sd0JBQXdCLEdBRXpCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxvQkFBb0IsRUFBdUIsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNoRixPQUFPLEVBQUUscUJBQXFCLEVBQXVCLE1BQU0sMEJBQTBCLENBQUM7QUFFdEYsTUFBTSx3QkFBd0IsR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUM1RCxNQUFNLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQWtCdEQsTUFBTSxVQUFVLG1CQUFtQixDQUNqQyxJQUF1QixFQUN2QixTQUFxQixFQUNyQixNQUFnRDtJQUVoRCxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsd0JBQXdCLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQzFGLENBQUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQ0c7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUMzQixNQUF5RCxFQUN6RCxHQUFHLFFBQXlCO0lBRTVCLE1BQU0sU0FBUyxHQUFlO1FBQzVCO1lBQ0UsT0FBTyxFQUFFLHVCQUF1QjtZQUNoQyxLQUFLLEVBQUUsSUFBSTtZQUNYLFFBQVE7Z0JBQ04sTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDaEQsQ0FBQztTQUNGO0tBQ0YsQ0FBQztJQUNGLE1BQU0sWUFBWSxHQUF3QixFQUFFLENBQUM7SUFFN0MsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7UUFDaEMsU0FBUyxDQUFDLElBQUksQ0FBQztZQUNiLE9BQU8sRUFBRSxvQkFBb0I7WUFDN0IsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQyxDQUFDO0tBQ0o7U0FBTTtRQUNMLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDYixPQUFPLEVBQUUsb0JBQW9CO1lBQzdCLFFBQVEsRUFBRSxNQUFNO1NBQ2pCLENBQUMsQ0FBQztLQUNKO0lBRUQsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7UUFDOUIsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7UUFDckQsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakM7SUFFRCxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtRQUM5QixPQUFPLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsT0FBTyx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQscUVBQXFFO0FBQ3JFLE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxhQUFrQztJQUNsRSxPQUFPLG1CQUFtQiw0REFBc0M7UUFDOUQsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRTtLQUM1RCxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRU5WSVJPTk1FTlRfSU5JVElBTElaRVIsXG4gIEVudmlyb25tZW50UHJvdmlkZXJzLFxuICBpbmplY3QsXG4gIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyxcbiAgUHJvdmlkZXIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTUFUT01PX0NPTkZJR1VSQVRJT04sIE1hdG9tb0NvbmZpZ3VyYXRpb24gfSBmcm9tICcuL3RyYWNrZXIvY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBNYXRvbW9Jbml0aWFsaXplclNlcnZpY2UgfSBmcm9tICcuL3RyYWNrZXIvbWF0b21vLWluaXRpYWxpemVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTUFUT01PX1NDUklQVF9GQUNUT1JZLCBNYXRvbW9TY3JpcHRGYWN0b3J5IH0gZnJvbSAnLi90cmFja2VyL3NjcmlwdC1mYWN0b3J5JztcblxuY29uc3QgUFJJVkFURV9NQVRPTU9fUFJPVklERVJTID0gU3ltYm9sKCdNQVRPTU9fUFJPVklERVJTJyk7XG5jb25zdCBQUklWQVRFX01BVE9NT19DSEVDS1MgPSBTeW1ib2woJ01BVE9NT19DSEVDS1MnKTtcblxuZXhwb3J0IHR5cGUgTWF0b21vRmVhdHVyZUtpbmQgPSB1bmtub3duO1xuXG4vKipcbiAqIEFkZGl0aW9uYWwgTWF0b21vIGZlYXR1cmVzIGtpbmRcbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gQ29yZU1hdG9tb0ZlYXR1cmVLaW5kIHtcbiAgLyoqIEBzZWUgd2l0aFNjcmlwdEZhY3RvcnkgKi9cbiAgU2NyaXB0RmFjdG9yeSA9ICdTY3JpcHRGYWN0b3J5Jyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNYXRvbW9GZWF0dXJlIHtcbiAgcmVhZG9ubHkga2luZDogTWF0b21vRmVhdHVyZUtpbmQ7XG4gIFtQUklWQVRFX01BVE9NT19QUk9WSURFUlNdOiBQcm92aWRlcltdO1xuICBbUFJJVkFURV9NQVRPTU9fQ0hFQ0tTXT86IChmZWF0dXJlczogTWF0b21vRmVhdHVyZUtpbmRbXSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1hdG9tb0ZlYXR1cmUoXG4gIGtpbmQ6IE1hdG9tb0ZlYXR1cmVLaW5kLFxuICBwcm92aWRlcnM6IFByb3ZpZGVyW10sXG4gIGNoZWNrcz86IChmZWF0dXJlczogTWF0b21vRmVhdHVyZUtpbmRbXSkgPT4gdm9pZCxcbik6IE1hdG9tb0ZlYXR1cmUge1xuICByZXR1cm4geyBraW5kLCBbUFJJVkFURV9NQVRPTU9fUFJPVklERVJTXTogcHJvdmlkZXJzLCBbUFJJVkFURV9NQVRPTU9fQ0hFQ0tTXTogY2hlY2tzIH07XG59XG5cbi8qKlxuICogUmV0dXJuIE1hdG9tbyBwcm92aWRlcnMgKHR5cGljYWxseSBhZGRlZCB0byBhbiBhcHBsaWNhdGlvbidzIHJvb3QgbW9kdWxlKVxuICpcbiAqIEFkZGl0aW9uYWwgZmVhdHVyZXMgbWF5IGJlIHByb3ZpZGVkIGFzIGFkZGl0aW9uYWwgYXJndW1lbnRzLCBsaWtlIHRoaXM6XG4gKiBAZXhhbXBsZVxuICogLy8gU2ltcGxlIGNvbmZpZ3VyYXRpb25cbiAqIHByb3ZpZGVyczogWyBwcm92aWRlTWF0b21vKHsgc2l0ZUlkOiAxLCB0cmFja2VyVXJsOiAnLi4uJyB9KSBdXG4gKlxuICogLy8gV2l0aCBhZGRpdGlvbmFsIGZlYXR1cmVzXG4gKiBwcm92aWRlcnM6IFtcbiAqICAgICBwcm92aWRlTWF0b21vKFxuICogICAgICAgICB7IHNpdGVJZDogMSwgdHJhY2tlclVybDogJy4uLicgfSxcbiAqICAgICAgICAgd2l0aFNjcmlwdEZhY3RvcnkoLi4uKSxcbiAqICAgICApXG4gKiBdXG4gKlxuICogLy8gV2l0aCBhZHZhbmNlZCBjb25maWcgZmFjdG9yeSBmdW5jdGlvblxuICogcHJvdmlkZXJzOiBbXG4gKiAgICAgcHJvdmlkZU1hdG9tbyhcbiAqICAgICAgICAgKCkgPT4gaW5qZWN0KE15U2VydmljZSkuZ2V0TWF0b21vQ29uZmlnKCksXG4gKiAgICAgICAgIHdpdGhTY3JpcHRGYWN0b3J5KC4uLiksXG4gKiAgICAgKVxuICogXVxuICpcbiAqIEBwYXJhbSBjb25maWcgTWF0b21vIGNvbmZpZ3VyYXRpb24gKG9yIGNvbmZpZ3VyYXRpb24gZmFjdG9yeSwgd2hpY2ggY2FuIHVzZSBgaW5qZWN0YClcbiAqIEBwYXJhbSBmZWF0dXJlcyBPcHRpb25hbCBhZGRpdGlvbmFsIGZlYXR1cmVzIHRvIGVuYWJsZVxuICpcbiAqIEBzZWUgTWF0b21vQ29uZmlndXJhdGlvblxuICogQHNlZSB3aXRoU2NyaXB0RmFjdG9yeVxuICogQHNlZSB3aXRoUm91dGVyXG4gKiBAc2VlIHdpdGhSb3V0ZXJJbnRlcmNlcHRvcnNcbiAqIEBzZWUgd2l0aFJvdXRlRGF0YVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZU1hdG9tbyhcbiAgY29uZmlnOiBNYXRvbW9Db25maWd1cmF0aW9uIHwgKCgpID0+IE1hdG9tb0NvbmZpZ3VyYXRpb24pLFxuICAuLi5mZWF0dXJlczogTWF0b21vRmVhdHVyZVtdXG4pOiBFbnZpcm9ubWVudFByb3ZpZGVycyB7XG4gIGNvbnN0IHByb3ZpZGVyczogUHJvdmlkZXJbXSA9IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBFTlZJUk9OTUVOVF9JTklUSUFMSVpFUixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlVmFsdWUoKSB7XG4gICAgICAgIGluamVjdChNYXRvbW9Jbml0aWFsaXplclNlcnZpY2UpLmluaXRpYWxpemUoKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgXTtcbiAgY29uc3QgZmVhdHVyZXNLaW5kOiBNYXRvbW9GZWF0dXJlS2luZFtdID0gW107XG5cbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm92aWRlcnMucHVzaCh7XG4gICAgICBwcm92aWRlOiBNQVRPTU9fQ09ORklHVVJBVElPTixcbiAgICAgIHVzZUZhY3Rvcnk6IGNvbmZpZyxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBwcm92aWRlcnMucHVzaCh7XG4gICAgICBwcm92aWRlOiBNQVRPTU9fQ09ORklHVVJBVElPTixcbiAgICAgIHVzZVZhbHVlOiBjb25maWcsXG4gICAgfSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IGZlYXR1cmUgb2YgZmVhdHVyZXMpIHtcbiAgICBwcm92aWRlcnMucHVzaCguLi5mZWF0dXJlW1BSSVZBVEVfTUFUT01PX1BST1ZJREVSU10pO1xuICAgIGZlYXR1cmVzS2luZC5wdXNoKGZlYXR1cmUua2luZCk7XG4gIH1cblxuICBmb3IgKGNvbnN0IGZlYXR1cmUgb2YgZmVhdHVyZXMpIHtcbiAgICBmZWF0dXJlW1BSSVZBVEVfTUFUT01PX0NIRUNLU10/LihmZWF0dXJlc0tpbmQpO1xuICB9XG5cbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhwcm92aWRlcnMpO1xufVxuXG4vKiogQWRkIGEgY3VzdG9tIHNjcmlwdCBmYWN0b3J5IHRvIHVzZSBmb3IgTWF0b21vJ3Mgc2NyaXB0IGVsZW1lbnQgKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU2NyaXB0RmFjdG9yeShzY3JpcHRGYWN0b3J5OiBNYXRvbW9TY3JpcHRGYWN0b3J5KTogTWF0b21vRmVhdHVyZSB7XG4gIHJldHVybiBjcmVhdGVNYXRvbW9GZWF0dXJlKENvcmVNYXRvbW9GZWF0dXJlS2luZC5TY3JpcHRGYWN0b3J5LCBbXG4gICAgeyBwcm92aWRlOiBNQVRPTU9fU0NSSVBUX0ZBQ1RPUlksIHVzZVZhbHVlOiBzY3JpcHRGYWN0b3J5IH0sXG4gIF0pO1xufVxuIl19