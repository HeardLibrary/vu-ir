import { Injectable } from '@angular/core';
import { MatomoTracker } from 'ngx-matomo-client/core';
import { MatomoTestingInstance } from './matomo-testing-instance';
import * as i0 from "@angular/core";
/**
 * No-op implementation of {@link MatomoTracker}
 *
 * All commands are memoized and can later be retrieved using
 * {@link getAllCommands getAllCommands()} or {@link getCommand getCommand(index)}.
 *
 * All <i>getter</i> methods will immediately resolve to an <i>empty value</i>.
 * This can be customized by setting a custom Matomo instance with {@link setMatomoInstance setMatomoInstance()}.
 */
export class MatomoTestingTracker extends MatomoTracker {
    #fakeInstance = new MatomoTestingInstance();
    #paq = [];
    /** Retrieve the current Matomo instance */
    getMatomoInstance() {
        return this.#fakeInstance;
    }
    /** Set the current matomo instance */
    setMatomoInstance(instance) {
        this.#fakeInstance = instance;
    }
    /** Retrieve all memoized commands */
    getAllCommands() {
        return [...this.#paq];
    }
    /** Retrieve nth memoized command */
    getCommand(index) {
        return this.#paq[index];
    }
    /** Clear all memoized commands */
    reset() {
        this.#paq = [];
    }
    push(command) {
        this.#paq.push(command);
    }
    async pushFn(fn) {
        return fn(this.#fakeInstance);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoTestingTracker, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoTestingTracker }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: MatomoTestingTracker, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0b21vLXRlc3RpbmctdHJhY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1tYXRvbW8tY2xpZW50L3Rlc3RpbmcvbWF0b21vLXRlc3RpbmctdHJhY2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBa0IsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdkUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0FBRWxFOzs7Ozs7OztHQVFHO0FBRUgsTUFBTSxPQUFPLG9CQUFxQixTQUFRLGFBQWE7SUFDckQsYUFBYSxHQUFtQixJQUFJLHFCQUFxQixFQUFFLENBQUM7SUFDNUQsSUFBSSxHQUFnQixFQUFFLENBQUM7SUFFdkIsMkNBQTJDO0lBQzNDLGlCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRUQsc0NBQXNDO0lBQ3RDLGlCQUFpQixDQUFDLFFBQXdCO1FBQ3hDLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxxQ0FBcUM7SUFDckMsY0FBYztRQUNaLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsb0NBQW9DO0lBQ3BDLFVBQVUsQ0FBQyxLQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsa0NBQWtDO0lBQ2xDLEtBQUs7UUFDSCxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRVMsSUFBSSxDQUFDLE9BQWtCO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFUyxLQUFLLENBQUMsTUFBTSxDQUFJLEVBQWlDO1FBQ3pELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNoQyxDQUFDOzhHQW5DVSxvQkFBb0I7a0hBQXBCLG9CQUFvQjs7MkZBQXBCLG9CQUFvQjtrQkFEaEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdG9tb0luc3RhbmNlLCBNYXRvbW9UcmFja2VyIH0gZnJvbSAnbmd4LW1hdG9tby1jbGllbnQvY29yZSc7XG5pbXBvcnQgeyBNYXRvbW9UZXN0aW5nSW5zdGFuY2UgfSBmcm9tICcuL21hdG9tby10ZXN0aW5nLWluc3RhbmNlJztcblxuLyoqXG4gKiBOby1vcCBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgTWF0b21vVHJhY2tlcn1cbiAqXG4gKiBBbGwgY29tbWFuZHMgYXJlIG1lbW9pemVkIGFuZCBjYW4gbGF0ZXIgYmUgcmV0cmlldmVkIHVzaW5nXG4gKiB7QGxpbmsgZ2V0QWxsQ29tbWFuZHMgZ2V0QWxsQ29tbWFuZHMoKX0gb3Ige0BsaW5rIGdldENvbW1hbmQgZ2V0Q29tbWFuZChpbmRleCl9LlxuICpcbiAqIEFsbCA8aT5nZXR0ZXI8L2k+IG1ldGhvZHMgd2lsbCBpbW1lZGlhdGVseSByZXNvbHZlIHRvIGFuIDxpPmVtcHR5IHZhbHVlPC9pPi5cbiAqIFRoaXMgY2FuIGJlIGN1c3RvbWl6ZWQgYnkgc2V0dGluZyBhIGN1c3RvbSBNYXRvbW8gaW5zdGFuY2Ugd2l0aCB7QGxpbmsgc2V0TWF0b21vSW5zdGFuY2Ugc2V0TWF0b21vSW5zdGFuY2UoKX0uXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNYXRvbW9UZXN0aW5nVHJhY2tlciBleHRlbmRzIE1hdG9tb1RyYWNrZXIge1xuICAjZmFrZUluc3RhbmNlOiBNYXRvbW9JbnN0YW5jZSA9IG5ldyBNYXRvbW9UZXN0aW5nSW5zdGFuY2UoKTtcbiAgI3BhcTogdW5rbm93bltdW10gPSBbXTtcblxuICAvKiogUmV0cmlldmUgdGhlIGN1cnJlbnQgTWF0b21vIGluc3RhbmNlICovXG4gIGdldE1hdG9tb0luc3RhbmNlKCk6IE1hdG9tb0luc3RhbmNlIHtcbiAgICByZXR1cm4gdGhpcy4jZmFrZUluc3RhbmNlO1xuICB9XG5cbiAgLyoqIFNldCB0aGUgY3VycmVudCBtYXRvbW8gaW5zdGFuY2UgKi9cbiAgc2V0TWF0b21vSW5zdGFuY2UoaW5zdGFuY2U6IE1hdG9tb0luc3RhbmNlKSB7XG4gICAgdGhpcy4jZmFrZUluc3RhbmNlID0gaW5zdGFuY2U7XG4gIH1cblxuICAvKiogUmV0cmlldmUgYWxsIG1lbW9pemVkIGNvbW1hbmRzICovXG4gIGdldEFsbENvbW1hbmRzKCk6IHVua25vd25bXVtdIHtcbiAgICByZXR1cm4gWy4uLnRoaXMuI3BhcV07XG4gIH1cblxuICAvKiogUmV0cmlldmUgbnRoIG1lbW9pemVkIGNvbW1hbmQgKi9cbiAgZ2V0Q29tbWFuZChpbmRleDogbnVtYmVyKTogdW5rbm93bltdIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy4jcGFxW2luZGV4XTtcbiAgfVxuXG4gIC8qKiBDbGVhciBhbGwgbWVtb2l6ZWQgY29tbWFuZHMgKi9cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy4jcGFxID0gW107XG4gIH1cblxuICBwcm90ZWN0ZWQgcHVzaChjb21tYW5kOiB1bmtub3duW10pOiB2b2lkIHtcbiAgICB0aGlzLiNwYXEucHVzaChjb21tYW5kKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBwdXNoRm48VD4oZm46IChtYXRvbW86IE1hdG9tb0luc3RhbmNlKSA9PiBUKTogUHJvbWlzZTxUPiB7XG4gICAgcmV0dXJuIGZuKHRoaXMuI2Zha2VJbnN0YW5jZSk7XG4gIH1cbn1cbiJdfQ==